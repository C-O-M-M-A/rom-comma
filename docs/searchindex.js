Search.setIndex({"docnames": ["glossary", "index", "pages/package/reference", "pages/package/romcomma.base", "pages/package/romcomma.base.classes", "pages/package/romcomma.base.classes.Data", "pages/package/romcomma.base.classes.Frame", "pages/package/romcomma.base.classes.Model", "pages/package/romcomma.base.definitions", "pages/package/romcomma.base.definitions.EFFECTIVELY_ZERO", "pages/package/romcomma.base.definitions.FLOAT", "pages/package/romcomma.base.definitions.INT", "pages/package/romcomma.base.definitions.NP", "pages/package/romcomma.base.definitions.TF", "pages/package/romcomma.data", "pages/package/romcomma.data.storage", "pages/package/romcomma.data.storage.Fold", "pages/package/romcomma.data.storage.Frame", "pages/package/romcomma.data.storage.Normalization", "pages/package/romcomma.data.storage.Repository", "pages/package/romcomma.gpf", "pages/package/romcomma.gpf.base", "pages/package/romcomma.gpf.base.Variance", "pages/package/romcomma.gpf.kernels", "pages/package/romcomma.gpf.kernels.MOStationary", "pages/package/romcomma.gpf.kernels.RBF", "pages/package/romcomma.gpf.likelihoods", "pages/package/romcomma.gpf.likelihoods.MOGaussian", "pages/package/romcomma.gpf.mean_functions", "pages/package/romcomma.gpf.mean_functions.MOMeanFunction", "pages/package/romcomma.gpf.models", "pages/package/romcomma.gpf.models.MOGPR", "pages/package/romcomma.gpf.tests", "pages/package/romcomma.gpf.tests.covariance", "pages/package/romcomma.gpf.tests.increment", "pages/package/romcomma.gpf.tests.kernel", "pages/package/romcomma.gpf.tests.likelihood", "pages/package/romcomma.gpf.tests.regression_data", "pages/package/romcomma.gpr", "pages/package/romcomma.gpr.kernels", "pages/package/romcomma.gpr.kernels.Kernel", "pages/package/romcomma.gpr.kernels.RBF", "pages/package/romcomma.gpr.models", "pages/package/romcomma.gpr.models.GPR", "pages/package/romcomma.gpr.models.Likelihood", "pages/package/romcomma.gpr.models.MOGP", "pages/package/romcomma.gsa", "pages/package/romcomma.gsa.base", "pages/package/romcomma.gsa.base.Calibrator", "pages/package/romcomma.gsa.base.Gaussian", "pages/package/romcomma.gsa.base.diag_det", "pages/package/romcomma.gsa.base.mean", "pages/package/romcomma.gsa.base.ms", "pages/package/romcomma.gsa.base.rms", "pages/package/romcomma.gsa.base.sos", "pages/package/romcomma.gsa.base.sym_check", "pages/package/romcomma.gsa.calibrators", "pages/package/romcomma.gsa.calibrators.ClosedSobol", "pages/package/romcomma.gsa.calibrators.ClosedSobolWithError", "pages/package/romcomma.gsa.calibrators.ClosedSobolWithRotation", "pages/package/romcomma.gsa.models", "pages/package/romcomma.gsa.models.GSA", "pages/package/romcomma.gsa.models.Sobol", "pages/package/romcomma.rom", "pages/package/romcomma.rom.old", "pages/package/romcomma.run", "pages/package/romcomma.run.context", "pages/package/romcomma.run.context.Environment", "pages/package/romcomma.run.context.Timer", "pages/package/romcomma.run.function", "pages/package/romcomma.run.function.ALL", "pages/package/romcomma.run.function.ISHIGAMI", "pages/package/romcomma.run.function.OAKLEY2004", "pages/package/romcomma.run.function.SOBOL_G", "pages/package/romcomma.run.function.Scalar", "pages/package/romcomma.run.function.Vector", "pages/package/romcomma.run.function.linspace", "pages/package/romcomma.run.results", "pages/package/romcomma.run.results.Collect", "pages/package/romcomma.run.results.copy", "pages/package/romcomma.run.sample", "pages/package/romcomma.run.sample.DOE", "pages/package/romcomma.run.sample.Function", "pages/package/romcomma.run.sample.GaussianNoise", "pages/package/romcomma.run.summarised", "pages/package/romcomma.run.summarised.gpr", "pages/package/romcomma.run.summarised.gsa", "pages/package/romcomma.user", "pages/package/romcomma.user.benchmark_gsa", "pages/package/romcomma.user.benchmark_gsa.BASE_FOLDER", "pages/package/romcomma.user.gpr_from_function", "pages/package/romcomma.user.gpr_from_function.DOE", "pages/package/romcomma.user.gpr_from_function.FUNCTION_VECTOR", "pages/package/romcomma.user.gpr_from_function.IGNORE_EXCEPTIONS", "pages/package/romcomma.user.gpr_from_function.IS_COVARIANT", "pages/package/romcomma.user.gpr_from_function.IS_ISOTROPIC", "pages/package/romcomma.user.gpr_from_function.IS_NOISE_COVARIANT", "pages/package/romcomma.user.gpr_from_function.IS_NOISE_VARIANCE_RANDOM", "pages/package/romcomma.user.gpr_from_function.IS_READ", "pages/package/romcomma.user.gpr_from_function.K", "pages/package/romcomma.user.gpr_from_function.Ms", "pages/package/romcomma.user.gpr_from_function.NOISE_MAGNITUDES", "pages/package/romcomma.user.gpr_from_function.Ns", "pages/package/romcomma.user.gpr_from_function.READ", "pages/package/romcomma.user.gpr_from_function.ROOT", "pages/package/romcomma.user.gpr_from_function.ROTATIONS", "pages/package/romcomma.user.gsa_from_function", "pages/package/romcomma.user.gsa_from_function.DOE", "pages/package/romcomma.user.gsa_from_function.FUNCTION_VECTOR", "pages/package/romcomma.user.gsa_from_function.IGNORE_EXCEPTIONS", "pages/package/romcomma.user.gsa_from_function.IS_COVARIANT", "pages/package/romcomma.user.gsa_from_function.IS_ISOTROPIC", "pages/package/romcomma.user.gsa_from_function.IS_NOISE_COVARIANT", "pages/package/romcomma.user.gsa_from_function.IS_NOISE_VARIANCE_RANDOM", "pages/package/romcomma.user.gsa_from_function.IS_READ", "pages/package/romcomma.user.gsa_from_function.K", "pages/package/romcomma.user.gsa_from_function.KINDS", "pages/package/romcomma.user.gsa_from_function.Ms", "pages/package/romcomma.user.gsa_from_function.NOISE_MAGNITUDES", "pages/package/romcomma.user.gsa_from_function.Ns", "pages/package/romcomma.user.gsa_from_function.READ", "pages/package/romcomma.user.gsa_from_function.ROOT", "pages/package/romcomma.user.gsa_from_function.ROTATIONS", "pages/package/romcomma.user.repo_from_csv", "pages/package/romcomma.user.repo_from_csv.ADD_NOISE", "pages/package/romcomma.user.repo_from_csv.CSV", "pages/package/romcomma.user.repo_from_csv.IS_NOISE_COVARIANT", "pages/package/romcomma.user.repo_from_csv.IS_NOISE_VARIANCE_RANDOM", "pages/package/romcomma.user.repo_from_csv.K", "pages/package/romcomma.user.repo_from_csv.NOISE_MAGNITUDES", "pages/package/romcomma.user.repo_from_csv.ROOT", "pages/package/romcomma.user.repo_from_function", "pages/package/romcomma.user.repo_from_function.DOE", "pages/package/romcomma.user.repo_from_function.FUNCTION_VECTOR", "pages/package/romcomma.user.repo_from_function.IS_NOISE_COVARIANT", "pages/package/romcomma.user.repo_from_function.IS_NOISE_VARIANCE_RANDOM", "pages/package/romcomma.user.repo_from_function.K", "pages/package/romcomma.user.repo_from_function.Ms", "pages/package/romcomma.user.repo_from_function.NOISE_MAGNITUDES", "pages/package/romcomma.user.repo_from_function.Ns", "pages/package/romcomma.user.repo_from_function.READ", "pages/package/romcomma.user.repo_from_function.ROOT", "pages/package/romcomma.user.repo_from_function.ROTATIONS", "pages/package/romcomma.user.toy", "pages/package/romcomma.user.toy.ROOT", "pages/start"], "filenames": ["glossary.rst", "index.rst", "pages\\package\\reference.rst", "pages\\package\\romcomma.base.rst", "pages\\package\\romcomma.base.classes.rst", "pages\\package\\romcomma.base.classes.Data.rst", "pages\\package\\romcomma.base.classes.Frame.rst", "pages\\package\\romcomma.base.classes.Model.rst", "pages\\package\\romcomma.base.definitions.rst", "pages\\package\\romcomma.base.definitions.EFFECTIVELY_ZERO.rst", "pages\\package\\romcomma.base.definitions.FLOAT.rst", "pages\\package\\romcomma.base.definitions.INT.rst", "pages\\package\\romcomma.base.definitions.NP.rst", "pages\\package\\romcomma.base.definitions.TF.rst", "pages\\package\\romcomma.data.rst", "pages\\package\\romcomma.data.storage.rst", "pages\\package\\romcomma.data.storage.Fold.rst", "pages\\package\\romcomma.data.storage.Frame.rst", "pages\\package\\romcomma.data.storage.Normalization.rst", "pages\\package\\romcomma.data.storage.Repository.rst", "pages\\package\\romcomma.gpf.rst", "pages\\package\\romcomma.gpf.base.rst", "pages\\package\\romcomma.gpf.base.Variance.rst", "pages\\package\\romcomma.gpf.kernels.rst", "pages\\package\\romcomma.gpf.kernels.MOStationary.rst", "pages\\package\\romcomma.gpf.kernels.RBF.rst", "pages\\package\\romcomma.gpf.likelihoods.rst", "pages\\package\\romcomma.gpf.likelihoods.MOGaussian.rst", "pages\\package\\romcomma.gpf.mean_functions.rst", "pages\\package\\romcomma.gpf.mean_functions.MOMeanFunction.rst", "pages\\package\\romcomma.gpf.models.rst", "pages\\package\\romcomma.gpf.models.MOGPR.rst", "pages\\package\\romcomma.gpf.tests.rst", "pages\\package\\romcomma.gpf.tests.covariance.rst", "pages\\package\\romcomma.gpf.tests.increment.rst", "pages\\package\\romcomma.gpf.tests.kernel.rst", "pages\\package\\romcomma.gpf.tests.likelihood.rst", "pages\\package\\romcomma.gpf.tests.regression_data.rst", "pages\\package\\romcomma.gpr.rst", "pages\\package\\romcomma.gpr.kernels.rst", "pages\\package\\romcomma.gpr.kernels.Kernel.rst", "pages\\package\\romcomma.gpr.kernels.RBF.rst", "pages\\package\\romcomma.gpr.models.rst", "pages\\package\\romcomma.gpr.models.GPR.rst", "pages\\package\\romcomma.gpr.models.Likelihood.rst", "pages\\package\\romcomma.gpr.models.MOGP.rst", "pages\\package\\romcomma.gsa.rst", "pages\\package\\romcomma.gsa.base.rst", "pages\\package\\romcomma.gsa.base.Calibrator.rst", "pages\\package\\romcomma.gsa.base.Gaussian.rst", "pages\\package\\romcomma.gsa.base.diag_det.rst", "pages\\package\\romcomma.gsa.base.mean.rst", "pages\\package\\romcomma.gsa.base.ms.rst", "pages\\package\\romcomma.gsa.base.rms.rst", "pages\\package\\romcomma.gsa.base.sos.rst", "pages\\package\\romcomma.gsa.base.sym_check.rst", "pages\\package\\romcomma.gsa.calibrators.rst", "pages\\package\\romcomma.gsa.calibrators.ClosedSobol.rst", "pages\\package\\romcomma.gsa.calibrators.ClosedSobolWithError.rst", "pages\\package\\romcomma.gsa.calibrators.ClosedSobolWithRotation.rst", "pages\\package\\romcomma.gsa.models.rst", "pages\\package\\romcomma.gsa.models.GSA.rst", "pages\\package\\romcomma.gsa.models.Sobol.rst", "pages\\package\\romcomma.rom.rst", "pages\\package\\romcomma.rom.old.rst", "pages\\package\\romcomma.run.rst", "pages\\package\\romcomma.run.context.rst", "pages\\package\\romcomma.run.context.Environment.rst", "pages\\package\\romcomma.run.context.Timer.rst", "pages\\package\\romcomma.run.function.rst", "pages\\package\\romcomma.run.function.ALL.rst", "pages\\package\\romcomma.run.function.ISHIGAMI.rst", "pages\\package\\romcomma.run.function.OAKLEY2004.rst", "pages\\package\\romcomma.run.function.SOBOL_G.rst", "pages\\package\\romcomma.run.function.Scalar.rst", "pages\\package\\romcomma.run.function.Vector.rst", "pages\\package\\romcomma.run.function.linspace.rst", "pages\\package\\romcomma.run.results.rst", "pages\\package\\romcomma.run.results.Collect.rst", "pages\\package\\romcomma.run.results.copy.rst", "pages\\package\\romcomma.run.sample.rst", "pages\\package\\romcomma.run.sample.DOE.rst", "pages\\package\\romcomma.run.sample.Function.rst", "pages\\package\\romcomma.run.sample.GaussianNoise.rst", "pages\\package\\romcomma.run.summarised.rst", "pages\\package\\romcomma.run.summarised.gpr.rst", "pages\\package\\romcomma.run.summarised.gsa.rst", "pages\\package\\romcomma.user.rst", "pages\\package\\romcomma.user.benchmark_gsa.rst", "pages\\package\\romcomma.user.benchmark_gsa.BASE_FOLDER.rst", "pages\\package\\romcomma.user.gpr_from_function.rst", "pages\\package\\romcomma.user.gpr_from_function.DOE.rst", "pages\\package\\romcomma.user.gpr_from_function.FUNCTION_VECTOR.rst", "pages\\package\\romcomma.user.gpr_from_function.IGNORE_EXCEPTIONS.rst", "pages\\package\\romcomma.user.gpr_from_function.IS_COVARIANT.rst", "pages\\package\\romcomma.user.gpr_from_function.IS_ISOTROPIC.rst", "pages\\package\\romcomma.user.gpr_from_function.IS_NOISE_COVARIANT.rst", "pages\\package\\romcomma.user.gpr_from_function.IS_NOISE_VARIANCE_RANDOM.rst", "pages\\package\\romcomma.user.gpr_from_function.IS_READ.rst", "pages\\package\\romcomma.user.gpr_from_function.K.rst", "pages\\package\\romcomma.user.gpr_from_function.Ms.rst", "pages\\package\\romcomma.user.gpr_from_function.NOISE_MAGNITUDES.rst", "pages\\package\\romcomma.user.gpr_from_function.Ns.rst", "pages\\package\\romcomma.user.gpr_from_function.READ.rst", "pages\\package\\romcomma.user.gpr_from_function.ROOT.rst", "pages\\package\\romcomma.user.gpr_from_function.ROTATIONS.rst", "pages\\package\\romcomma.user.gsa_from_function.rst", "pages\\package\\romcomma.user.gsa_from_function.DOE.rst", "pages\\package\\romcomma.user.gsa_from_function.FUNCTION_VECTOR.rst", "pages\\package\\romcomma.user.gsa_from_function.IGNORE_EXCEPTIONS.rst", "pages\\package\\romcomma.user.gsa_from_function.IS_COVARIANT.rst", "pages\\package\\romcomma.user.gsa_from_function.IS_ISOTROPIC.rst", "pages\\package\\romcomma.user.gsa_from_function.IS_NOISE_COVARIANT.rst", "pages\\package\\romcomma.user.gsa_from_function.IS_NOISE_VARIANCE_RANDOM.rst", "pages\\package\\romcomma.user.gsa_from_function.IS_READ.rst", "pages\\package\\romcomma.user.gsa_from_function.K.rst", "pages\\package\\romcomma.user.gsa_from_function.KINDS.rst", "pages\\package\\romcomma.user.gsa_from_function.Ms.rst", "pages\\package\\romcomma.user.gsa_from_function.NOISE_MAGNITUDES.rst", "pages\\package\\romcomma.user.gsa_from_function.Ns.rst", "pages\\package\\romcomma.user.gsa_from_function.READ.rst", "pages\\package\\romcomma.user.gsa_from_function.ROOT.rst", "pages\\package\\romcomma.user.gsa_from_function.ROTATIONS.rst", "pages\\package\\romcomma.user.repo_from_csv.rst", "pages\\package\\romcomma.user.repo_from_csv.ADD_NOISE.rst", "pages\\package\\romcomma.user.repo_from_csv.CSV.rst", "pages\\package\\romcomma.user.repo_from_csv.IS_NOISE_COVARIANT.rst", "pages\\package\\romcomma.user.repo_from_csv.IS_NOISE_VARIANCE_RANDOM.rst", "pages\\package\\romcomma.user.repo_from_csv.K.rst", "pages\\package\\romcomma.user.repo_from_csv.NOISE_MAGNITUDES.rst", "pages\\package\\romcomma.user.repo_from_csv.ROOT.rst", "pages\\package\\romcomma.user.repo_from_function.rst", "pages\\package\\romcomma.user.repo_from_function.DOE.rst", "pages\\package\\romcomma.user.repo_from_function.FUNCTION_VECTOR.rst", "pages\\package\\romcomma.user.repo_from_function.IS_NOISE_COVARIANT.rst", "pages\\package\\romcomma.user.repo_from_function.IS_NOISE_VARIANCE_RANDOM.rst", "pages\\package\\romcomma.user.repo_from_function.K.rst", "pages\\package\\romcomma.user.repo_from_function.Ms.rst", "pages\\package\\romcomma.user.repo_from_function.NOISE_MAGNITUDES.rst", "pages\\package\\romcomma.user.repo_from_function.Ns.rst", "pages\\package\\romcomma.user.repo_from_function.READ.rst", "pages\\package\\romcomma.user.repo_from_function.ROOT.rst", "pages\\package\\romcomma.user.repo_from_function.ROTATIONS.rst", "pages\\package\\romcomma.user.toy.rst", "pages\\package\\romcomma.user.toy.ROOT.rst", "pages\\start.rst"], "titles": ["Glossary", "rom-comma User Guide", "Module Reference", "romcomma.base", "romcomma.base.classes", "romcomma.base.classes.Data", "romcomma.base.classes.Frame", "romcomma.base.classes.Model", "romcomma.base.definitions", "romcomma.base.definitions.EFFECTIVELY_ZERO", "romcomma.base.definitions.FLOAT", "romcomma.base.definitions.INT", "romcomma.base.definitions.NP", "romcomma.base.definitions.TF", "romcomma.data", "romcomma.data.storage", "romcomma.data.storage.Fold", "romcomma.data.storage.Frame", "romcomma.data.storage.Normalization", "romcomma.data.storage.Repository", "romcomma.gpf", "romcomma.gpf.base", "romcomma.gpf.base.Variance", "romcomma.gpf.kernels", "romcomma.gpf.kernels.MOStationary", "romcomma.gpf.kernels.RBF", "romcomma.gpf.likelihoods", "romcomma.gpf.likelihoods.MOGaussian", "romcomma.gpf.mean_functions", "romcomma.gpf.mean_functions.MOMeanFunction", "romcomma.gpf.models", "romcomma.gpf.models.MOGPR", "romcomma.gpf.tests", "romcomma.gpf.tests.covariance", "romcomma.gpf.tests.increment", "romcomma.gpf.tests.kernel", "romcomma.gpf.tests.likelihood", "romcomma.gpf.tests.regression_data", "romcomma.gpr", "romcomma.gpr.kernels", "romcomma.gpr.kernels.Kernel", "romcomma.gpr.kernels.RBF", "romcomma.gpr.models", "romcomma.gpr.models.GPR", "romcomma.gpr.models.Likelihood", "romcomma.gpr.models.MOGP", "romcomma.gsa", "romcomma.gsa.base", "romcomma.gsa.base.Calibrator", "romcomma.gsa.base.Gaussian", "romcomma.gsa.base.diag_det", "romcomma.gsa.base.mean", "romcomma.gsa.base.ms", "romcomma.gsa.base.rms", "romcomma.gsa.base.sos", "romcomma.gsa.base.sym_check", "romcomma.gsa.calibrators", "romcomma.gsa.calibrators.ClosedSobol", "romcomma.gsa.calibrators.ClosedSobolWithError", "romcomma.gsa.calibrators.ClosedSobolWithRotation", "romcomma.gsa.models", "romcomma.gsa.models.GSA", "romcomma.gsa.models.Sobol", "romcomma.rom", "romcomma.rom.old", "romcomma.run", "romcomma.run.context", "romcomma.run.context.Environment", "romcomma.run.context.Timer", "romcomma.run.function", "romcomma.run.function.ALL", "romcomma.run.function.ISHIGAMI", "romcomma.run.function.OAKLEY2004", "romcomma.run.function.SOBOL_G", "romcomma.run.function.Scalar", "romcomma.run.function.Vector", "romcomma.run.function.linspace", "romcomma.run.results", "romcomma.run.results.Collect", "romcomma.run.results.copy", "romcomma.run.sample", "romcomma.run.sample.DOE", "romcomma.run.sample.Function", "romcomma.run.sample.GaussianNoise", "romcomma.run.summarised", "romcomma.run.summarised.gpr", "romcomma.run.summarised.gsa", "romcomma.user", "romcomma.user.benchmark_gsa", "romcomma.user.benchmark_gsa.BASE_FOLDER", "romcomma.user.gpr_from_function", "romcomma.user.gpr_from_function.DOE", "romcomma.user.gpr_from_function.FUNCTION_VECTOR", "romcomma.user.gpr_from_function.IGNORE_EXCEPTIONS", "romcomma.user.gpr_from_function.IS_COVARIANT", "romcomma.user.gpr_from_function.IS_ISOTROPIC", "romcomma.user.gpr_from_function.IS_NOISE_COVARIANT", "romcomma.user.gpr_from_function.IS_NOISE_VARIANCE_RANDOM", "romcomma.user.gpr_from_function.IS_READ", "romcomma.user.gpr_from_function.K", "romcomma.user.gpr_from_function.Ms", "romcomma.user.gpr_from_function.NOISE_MAGNITUDES", "romcomma.user.gpr_from_function.Ns", "romcomma.user.gpr_from_function.READ", "romcomma.user.gpr_from_function.ROOT", "romcomma.user.gpr_from_function.ROTATIONS", "romcomma.user.gsa_from_function", "romcomma.user.gsa_from_function.DOE", "romcomma.user.gsa_from_function.FUNCTION_VECTOR", "romcomma.user.gsa_from_function.IGNORE_EXCEPTIONS", "romcomma.user.gsa_from_function.IS_COVARIANT", "romcomma.user.gsa_from_function.IS_ISOTROPIC", "romcomma.user.gsa_from_function.IS_NOISE_COVARIANT", "romcomma.user.gsa_from_function.IS_NOISE_VARIANCE_RANDOM", "romcomma.user.gsa_from_function.IS_READ", "romcomma.user.gsa_from_function.K", "romcomma.user.gsa_from_function.KINDS", "romcomma.user.gsa_from_function.Ms", "romcomma.user.gsa_from_function.NOISE_MAGNITUDES", "romcomma.user.gsa_from_function.Ns", "romcomma.user.gsa_from_function.READ", "romcomma.user.gsa_from_function.ROOT", "romcomma.user.gsa_from_function.ROTATIONS", "romcomma.user.repo_from_csv", "romcomma.user.repo_from_csv.ADD_NOISE", "romcomma.user.repo_from_csv.CSV", "romcomma.user.repo_from_csv.IS_NOISE_COVARIANT", "romcomma.user.repo_from_csv.IS_NOISE_VARIANCE_RANDOM", "romcomma.user.repo_from_csv.K", "romcomma.user.repo_from_csv.NOISE_MAGNITUDES", "romcomma.user.repo_from_csv.ROOT", "romcomma.user.repo_from_function", "romcomma.user.repo_from_function.DOE", "romcomma.user.repo_from_function.FUNCTION_VECTOR", "romcomma.user.repo_from_function.IS_NOISE_COVARIANT", "romcomma.user.repo_from_function.IS_NOISE_VARIANCE_RANDOM", "romcomma.user.repo_from_function.K", "romcomma.user.repo_from_function.Ms", "romcomma.user.repo_from_function.NOISE_MAGNITUDES", "romcomma.user.repo_from_function.Ns", "romcomma.user.repo_from_function.READ", "romcomma.user.repo_from_function.ROOT", "romcomma.user.repo_from_function.ROTATIONS", "romcomma.user.toy", "romcomma.user.toy.ROOT", "Getting Started"], "terms": {"reduc": [1, 16, 61, 62, 86], "order": [0, 1, 61, 62, 75, 78, 145], "model": [1, 4, 5, 13, 40, 41, 58, 86, 98, 114, 145], "via": [1, 57, 58, 59, 61, 62, 145], "global": [0, 1, 19, 46, 145], "sensit": [0, 1, 46, 145], "analysi": [0, 1, 46, 145], "us": [0, 1, 7, 13, 16, 17, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 67, 82, 83, 85, 145], "gaussian": [0, 1, 20, 27, 28, 31, 38, 42, 43, 45, 61, 62, 83, 96, 112, 123, 124, 126, 134, 145], "process": [0, 1, 20, 27, 31, 38, 42, 43, 45, 61, 62, 77, 145], "regress": [0, 1, 20, 31, 38, 42, 145], "robert": 1, "A": [0, 1, 5, 7, 13, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 45, 49, 57, 58, 59, 61, 74, 75, 76, 78, 79, 82, 85, 86, 116, 145], "milton": [0, 1, 145], "The": [1, 2, 5, 6, 7, 10, 11, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 50, 57, 58, 59, 61, 62, 65, 67, 68, 70, 74, 75, 76, 78, 79, 81, 82, 85, 86, 89, 91, 92, 99, 100, 101, 102, 104, 107, 108, 115, 117, 118, 119, 121, 125, 128, 129, 130, 132, 133, 136, 137, 138, 139, 141, 144, 145], "univers": 1, "sheffield": 1, "thi": [0, 1, 5, 6, 7, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 67, 68, 74, 75, 82, 83, 85, 86, 145], "document": [1, 89, 104, 121, 125, 130, 141, 144, 145], "i": [0, 1, 5, 6, 7, 13, 16, 17, 18, 19, 22, 24, 25, 27, 28, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 67, 68, 75, 78, 79, 81, 82, 85, 86, 91, 94, 95, 96, 97, 101, 107, 110, 111, 112, 113, 118, 126, 127, 129, 132, 134, 135, 138, 145], "current": [1, 13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 145], "under": [1, 64, 82, 145], "construct": [1, 6, 13, 22, 40, 41, 57, 58, 59, 61, 62, 64, 75, 78, 82, 83, 85], "get": [0, 1, 13, 75], "start": [0, 1, 5, 7, 13, 58, 61, 76], "instal": 1, "packag": [0, 32, 145], "structur": 15, "refer": [0, 1, 13, 45, 145], "romcomma": [1, 145], "base": [0, 1, 16, 17, 18, 19, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 74, 75, 78, 81, 82, 83, 89, 145], "data": [1, 6, 7, 13, 27, 29, 31, 40, 41, 43, 44, 45, 61, 62, 74, 75, 82, 83, 85, 89, 104, 121, 125, 130, 141, 144, 145], "gpf": [1, 145], "gpr": [0, 1, 31, 57, 58, 59, 61, 62, 84, 93, 94, 95, 98, 109, 110, 111, 114, 145], "gsa": [0, 1, 84, 116, 145], "pd": [0, 2, 6, 16, 17, 18, 19, 78], "alias": [], "panda": [0, 2, 6, 13, 16, 17, 19], "code": [27, 40], "np": [0, 2, 6, 7, 13, 40, 41, 43, 44, 45, 70, 71, 72, 73, 74, 76, 83, 92, 108, 133], "numpi": [0, 2, 12, 13, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59], "tf": [0, 2, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 61, 62, 67], "tensorflow": [0, 2, 13, 22, 27, 31], "gf": [0, 2, 27], "gpflow": [0, 2, 20, 21, 23, 26, 27, 29, 30, 31, 40, 41, 43, 45, 67], "ddev": [], "standard": [0, 2, 61, 62, 70, 71, 92, 108, 133], "deviat": [0, 2], "index": [0, 1, 5, 6, 7, 13, 16, 17, 19, 56, 58, 61, 62, 78, 82, 86, 145], "modul": [0, 1, 3, 8, 14, 20, 22, 24, 25, 27, 29, 31, 38, 46, 57, 58, 59, 63, 65, 69, 87, 88, 90, 106, 123, 131, 143], "search": 1, "page": [1, 145], "rom": [0, 2, 84, 89, 104, 121, 125, 130, 141, 144, 145], "comma": [0, 2, 89, 104, 121, 125, 130, 141, 144, 145], "librari": [2, 3, 13, 20], "class": [3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 69, 74, 75, 77, 78, 80, 81, 82, 83, 145], "definit": [3, 22, 24, 25, 27, 145], "underpin": [3, 47, 62], "entir": [3, 61, 62], "contain": [13, 16, 19, 21, 23, 26, 30, 31, 32, 39, 42, 50, 56, 75, 78, 79, 82, 85, 86], "paramet": [5, 6, 7, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 34, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 91, 92, 107, 108, 132, 133], "folder": [0, 2, 5, 7, 16, 19, 40, 41, 43, 44, 45, 61, 62, 78, 79, 82, 85, 86, 89, 104, 121, 130, 141, 144, 145], "read_paramet": [], "fals": [7, 16, 19, 24, 25, 31, 40, 41, 44, 61, 62, 78, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 103, 107, 109, 110, 111, 112, 113, 120, 124, 126, 127, 132, 134, 135, 140], "kwarg": [5, 6, 7, 16, 17, 19, 27, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 67, 74, 75, 78, 82, 85, 86], "sourc": [5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 67, 68, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 91, 107, 132], "abc": [5, 7, 48], "abstract": [5, 7, 24, 40, 43, 61], "ani": [5, 6, 7, 13, 17, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 78, 81, 82, 83, 86, 145], "implement": [7, 13, 24, 31, 40, 41, 42, 43, 45, 61, 67, 85, 145], "gener": [0, 7, 16, 17, 19, 31, 40, 41, 45, 61, 62, 77, 82, 83, 92, 108, 133, 145], "file": [6, 7, 16, 17, 19, 40, 41, 43, 44, 45, 78, 82, 86, 98, 114, 123, 125], "storag": [7, 14, 75, 83, 145], "handl": [7, 16], "latter": 7, "dealt": 7, "each": [7, 13, 16, 19, 29, 31, 43, 45, 49, 75, 81, 82, 85, 86, 91, 107, 132], "subclass": [7, 31, 44, 61, 62], "overrid": [7, 57, 58, 59, 61, 62], "valu": [5, 7, 13, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 75, 76, 78, 82], "its": [0, 7, 13, 22, 24, 25, 27, 29, 31, 40, 41, 57, 58, 59, 81, 85, 91, 107, 132, 145], "own": [7, 22, 24, 25, 27, 29, 31, 57, 58, 59], "type": [5, 6, 7, 8, 10, 11, 12, 13, 16, 18, 19, 22, 24, 25, 27, 31, 34, 40, 41, 43, 44, 45, 49, 55, 57, 58, 59, 61, 62, 70, 71, 72, 73, 75, 76, 78, 82, 85, 86, 92, 108, 133], "namedtupl": [5, 7, 40, 41, 43, 44, 45, 58, 61, 62], "defin": [7, 13, 16, 17, 19, 24, 25, 29, 31, 40, 41], "set": [5, 7, 13, 40, 41, 43, 44, 45, 62, 67, 75], "take": [7, 49], "matric": [7, 24, 25], "also": [7, 13, 24, 25, 29, 31], "mai": [7, 13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 145], "includ": [7, 13, 16, 19, 22, 24, 25, 27, 29, 31, 43, 45, 49, 57, 58, 59, 75, 82, 145], "an": [0, 5, 7, 13, 16, 17, 19, 22, 24, 25, 29, 31, 40, 41, 43, 44, 45, 49, 57, 61, 62, 75, 78, 81, 82, 83, 85, 91, 103, 107, 120, 132, 140, 145], "optim": [13, 27, 31, 43, 45, 85], "method": [0, 5, 6, 7, 12, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 48, 49, 57, 58, 59, 61, 62, 74, 75, 78, 81, 82, 83, 145], "option": [6, 13, 16, 17, 18, 19, 45, 62, 78, 82, 86, 90, 106, 123, 131], "store": [5, 6, 7, 16, 40, 41, 43, 44, 45, 56, 61, 62], "json": [7, 16, 19], "which": [7, 13, 17, 18, 22, 24, 25, 27, 29, 31, 40, 41, 43, 45, 57, 58, 59, 61, 74, 75, 76, 79, 81, 82, 85, 86, 91, 101, 107, 118, 129, 132, 138, 145], "default": [5, 7, 13, 16, 17, 19, 24, 25, 27, 31, 40, 41, 43, 44, 45, 57, 58, 61, 62, 67, 68, 75, 81, 82, 85, 86, 91, 107, 132], "cl": 7, "pathlik": [], "bool": [6, 7, 16, 17, 19, 24, 25, 31, 40, 41, 43, 44, 45, 49, 61, 62, 67, 68, 78, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 98, 103, 107, 109, 110, 111, 112, 113, 114, 120, 124, 126, 127, 132, 134, 135, 140], "matrix": [5, 6, 7, 12, 13, 16, 19, 22, 24, 25, 27, 31, 40, 41, 43, 44, 45, 61, 62, 70, 71, 72, 73, 74, 81, 82, 83, 91, 92, 107, 108, 132, 133], "__init__": [5, 6, 7, 12, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 48, 49, 57, 58, 59, 61, 62, 74, 75, 78, 81, 82, 83], "constructor": [5, 7, 24, 25, 27, 44, 61, 62], "call": [5, 6, 7, 13, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 74, 145], "all": [7, 13, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 44, 57, 58, 59, 61, 62, 75, 82, 86, 89, 104, 121, 125, 130, 141, 144], "matter": [7, 40, 41, 44, 61, 62], "prioriti": [7, 40, 41, 44, 61, 62], "str": [5, 6, 7, 16, 17, 19, 22, 40, 41, 43, 44, 45, 52, 53, 54, 57, 58, 59, 61, 62, 67, 68, 75, 78, 79, 82, 83, 85, 86], "path": [5, 6, 7, 16, 17, 19, 40, 41, 43, 44, 45, 61, 62, 78, 79, 82, 86, 104, 121, 125, 130, 141, 144], "locat": [0, 7, 16, 19, 31, 40, 41, 44, 81, 91, 107, 132, 145], "If": [5, 6, 7, 13, 16, 17, 18, 24, 25, 31, 40, 41, 43, 44, 45, 49, 58, 61, 62, 67, 75, 79, 82, 85, 86], "true": [6, 7, 13, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 68, 76, 81, 85, 91, 107, 132], "ar": [5, 7, 13, 16, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 75, 85, 86, 145], "read": [5, 6, 7, 16, 17, 19, 40, 41, 43, 44, 45, 61, 62, 85, 98, 114, 124, 125], "from": [5, 6, 7, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 69, 75, 78, 83, 85, 98, 114, 123, 145], "otherwis": [6, 7, 17, 24, 25, 40, 41, 43, 44, 45, 67, 75, 85], "ndarrai": [5, 6, 7, 12, 16, 24, 25, 27, 31, 40, 41, 43, 44, 45, 61, 62, 74, 76, 81, 82, 83, 85], "field": [5, 7, 40, 41, 43, 44, 45, 58, 61, 62], "replac": [7, 40, 41, 43, 44, 45, 85], "after": [7, 22, 40, 41, 44, 105, 122, 142], "attribut": [5, 6, 7, 8, 12, 13, 16, 17, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 69, 74, 75, 78, 81, 82, 83, 88, 90, 106, 123, 131, 143], "none": [6, 13, 16, 18, 19, 24, 25, 31, 43, 45, 61, 62, 75, 78, 82, 85, 86, 94, 95, 98, 105, 110, 111, 114, 122], "placehold": [7, 13, 61], "must": [5, 7, 13, 19, 31, 40, 41, 43, 44, 45, 50, 61, 62], "overridden": [5, 7, 61], "notimpl": [5, 7, 61], "arrai": [5, 6, 7, 12, 13, 40, 41, 61, 142], "Not": [61, 62], "dtype": [5, 6, 7, 10, 11, 13, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 61], "u15": [], "alia": [12, 13, 40, 41, 43, 44, 45, 58, 62, 81], "number": [5, 7, 13, 16, 19, 27, 29, 31, 40, 41, 43, 45, 49, 58, 61, 74, 81, 82, 83, 91, 99, 100, 102, 107, 115, 117, 119, 128, 132, 136, 137, 139], "0": [5, 7, 13, 16, 18, 22, 24, 25, 27, 29, 31, 45, 49, 57, 58, 59, 61, 62, 76, 83, 86, 101, 118, 125, 129, 138, 141, 142, 144], "count": [5, 7, 49, 58, 61], "return": [5, 6, 7, 10, 11, 13, 16, 18, 19, 22, 24, 25, 27, 29, 31, 34, 40, 41, 43, 44, 45, 49, 50, 55, 57, 58, 59, 61, 62, 70, 71, 72, 73, 75, 76, 81, 82, 85, 86, 91, 92, 107, 108, 132, 133], "occurr": [5, 7, 58, 61], "stop": [5, 7, 58, 61, 76], "9223372036854775807": [5, 7, 58, 61], "first": [0, 5, 7, 22, 24, 25, 27, 29, 31, 57, 58, 59, 61, 62, 75, 145], "rais": [5, 6, 7, 13, 16, 19, 40, 41, 43, 45, 58, 61, 75, 78, 79, 82, 85, 86], "valueerror": [5, 7, 13, 58, 61], "present": [5, 7, 58, 61, 75], "broadcast_valu": 6, "model_nam": [], "target_shap": 6, "is_diagon": 6, "broadcast": [6, 22, 27, 29, 31, 40, 41, 43, 45, 49, 85, 86], "ordin": [5, 7, 31, 40, 41, 43, 44, 45, 49, 61, 62, 81, 91, 107, 132], "onli": [13, 16, 19, 22, 24, 25, 27, 45, 86], "error": [13, 40, 41, 43, 45, 58, 61, 62, 86], "report": 68, "name": [13, 22, 24, 25, 27, 29, 31, 43, 45, 57, 58, 59, 67, 68, 75, 78, 82, 85, 86], "whose": [22, 24, 25, 27, 29, 31, 57, 58, 59, 61, 62], "we": [13, 22, 31, 145], "tupl": [6, 13, 16, 19, 22, 24, 25, 27, 31, 40, 41, 43, 45, 75, 96, 97, 100, 101, 102, 112, 113, 117, 118, 119, 126, 127, 129, 134, 135, 137, 138, 139], "int": [6, 16, 19, 22, 27, 29, 31, 40, 41, 43, 45, 49, 55, 57, 58, 59, 61, 62, 74, 76, 81, 82, 83, 86, 91, 99, 100, 102, 107, 115, 117, 119, 128, 132, 136, 137, 139], "shape": [6, 13, 22, 24, 25, 27, 29, 31, 40, 41, 43, 45, 49, 50, 57, 58, 59, 76], "whether": [6, 16, 19, 24, 25, 40, 41, 43, 45, 61, 62, 68, 78, 81, 82, 85, 86, 91, 93, 94, 95, 96, 97, 98, 103, 107, 109, 110, 111, 112, 113, 114, 120, 124, 126, 127, 132, 134, 135, 140], "zero": [6, 18, 29, 31, 45, 83], "off": 6, "diagon": [6, 22, 24, 25, 27, 31, 40, 41, 49, 50, 58, 86], "element": [6, 13, 27], "squar": [0, 6, 25, 40, 41, 145], "self": [5, 6, 7, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 74, 75, 78, 82, 83], "chain": [5, 6, 7, 16, 19, 40, 41, 43, 44, 45, 49, 61, 62], "indexerror": [6, 16, 19, 40, 41, 43, 45, 82], "imposs": 6, "csv": [6, 16, 17, 19, 78, 82, 123], "assertionerror": [], "write": [6, 13, 17, 78], "chang": [6, 13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "unless": [16, 19, 61, 62, 82, 86], "properti": [7, 13, 16, 17, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 49, 57, 58, 59, 61, 62, 75, 82, 83], "dict": [6, 7, 16, 17, 19, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 75, 78, 82, 83, 85, 86], "param": [40, 41, 57, 58, 59, 62], "shorthand": [], "save": [], "_paramet": [], "essenti": [5, 40], "back": [6, 16, 17, 43, 45], "note": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 67], "lazi": [], "explicitli": 13, "design": [16, 19, 43, 45, 80, 82], "most": [5, 13, 145], "simpl": 5, "wrapper": [5, 29], "annoyingli": 5, "underscor": 5, "shouldn": [], "t": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "need": [13, 31, 61, 62, 86], "doe": [13, 31, 75, 80, 82, 92, 108, 133], "record": [5, 7, 16, 19, 40, 41, 43, 44, 45, 61, 62], "kei": [5, 7, 13, 40, 41, 43, 44, 45, 61, 62, 75, 78], "initi": [5, 7, 13, 16, 17, 18, 40, 41, 43, 44, 45, 61, 62, 83], "pair": [5, 7, 27, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 75], "precis": [5, 7, 40, 41, 43, 44, 45, 61, 62], "It": [13, 31], "caller": 13, "": [0, 13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 75, 145], "respons": [43, 45], "ensur": 13, "everi": [16, 19], "miss": [5, 7, 40, 41, 43, 44, 45, 61, 62, 78], "receiv": [5, 7, 40, 41, 43, 44, 45, 61, 62], "so": [5, 7, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 86], "import": [], "constant": [8, 13, 27], "hint": [], "function": [0, 8, 13, 25, 27, 28, 29, 31, 32, 38, 46, 47, 49, 66, 77, 80, 81, 84, 90, 92, 101, 105, 106, 108, 118, 122, 129, 131, 133, 138, 142, 145], "object": [6, 12, 13, 17, 18, 19, 27, 29, 31, 40, 49, 57, 58, 59, 61, 62, 70, 71, 72, 73, 74, 75, 78, 81, 82, 83, 92, 108, 133], "extend": [0, 12, 13, 27, 145], "tensor": [5, 7, 12, 13, 22, 24, 25, 27, 29, 31, 34, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62], "tensor1": [12, 13], "tensor2": [12, 13], "vector": [0, 12, 13, 43, 45, 49, 82, 92, 105, 108, 122, 133, 142, 145], "covector": [12, 13], "tensor3": [12, 13], "tensor4": [12, 13], "tensor5": [12, 13], "tensor6": [12, 13], "tensor7": [12, 13], "tensor8": [12, 13], "op": 13, "value_index": 13, "nativeobject": 13, "repres": [0, 13, 27, 145], "multidimension": 13, "singl": [13, 31, 40, 41, 56, 61, 62, 86], "known": [13, 29], "when": [9, 13, 78, 85, 86], "program": 13, "main": [0, 13, 145], "manipul": 13, "pass": [6, 13, 17, 22, 24, 25, 27, 29, 31, 45, 57, 58, 59, 62, 67, 78, 82, 85], "around": 13, "ha": [0, 13, 18, 24, 25, 31, 75, 82, 86, 105, 122, 142, 145], "follow": [13, 18, 22, 24, 25, 27, 29, 31, 45, 57, 58, 59, 75, 86, 145], "float32": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 67], "int32": 13, "string": [13, 40, 41, 67, 68], "exampl": [13, 71, 72, 73, 87, 88], "support": [13, 20, 31], "eager": [13, 67], "execut": 13, "graph": [13, 31], "In": [0, 13, 75, 145], "oper": [13, 67, 68], "evalu": [13, 24, 27], "immedi": 13, "comput": [13, 27, 31, 49], "later": 13, "below": [13, 145], "multipl": [13, 31], "result": [13, 22, 24, 25, 27, 29, 31, 43, 45, 57, 58, 59, 61, 62, 82, 85, 86, 145], "calcul": [13, 18, 31, 49, 56, 57, 58, 59, 61, 62, 86], "some": [13, 31, 145], "c": [0, 13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 67, 89, 104, 121, 125, 130, 141, 144, 145], "1": [13, 16, 18, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 45, 49, 57, 58, 59, 61, 62, 76, 82, 86, 89, 101, 115, 116, 121, 141], "2": [13, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 75, 86, 104, 116, 121, 125, 136, 141], "3": [13, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 71, 72, 73, 86, 89, 104, 116], "4": [13, 121], "d": [13, 24, 25, 31, 75], "e": [13, 24, 27, 28, 31, 43, 45, 75, 78, 86, 145], "matmul": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "print": [13, 67, 68], "7": [13, 72, 125, 137], "dure": [13, 24, 25, 27], "you": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59, 61, 62, 86], "discov": 13, "your": [13, 145], "actual": 13, "eagertensor": 13, "intern": [13, 49], "detail": [0, 13, 16, 17, 19, 145], "give": [13, 16, 19, 29, 43, 45, 49, 82], "access": 13, "common": 13, "wai": 13, "rank": [0, 13, 31, 49, 145], "size": [13, 31], "dimens": [13, 22, 24, 25, 27, 31, 40, 41, 43, 45, 49, 74, 81, 82, 91, 107, 132], "alwai": 13, "fulli": 13, "partial": 13, "produc": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "input": [0, 13, 16, 19, 24, 25, 31, 40, 41, 43, 45, 74, 81, 82, 90, 91, 92, 100, 105, 106, 107, 108, 117, 122, 131, 132, 133, 137, 142, 145], "case": [13, 75], "possibl": 13, "find": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "time": [13, 67, 68], "special": 13, "avail": [13, 85], "see": [6, 13, 31, 45], "variabl": [13, 16, 22, 24, 25, 27, 29, 31, 57, 58, 59], "spars": [13, 31], "sparsetensor": 13, "raggedtensor": 13, "caution": 13, "datafram": [5, 6, 7, 13, 16, 17, 18, 19, 40, 41, 43, 44, 45, 61, 62, 123], "underli": [13, 61, 62], "buffer": 13, "re": [13, 31], "python": [0, 13, 145], "b": [13, 22, 24, 25, 27, 29, 31, 45, 57, 58, 59], "int64": 13, "subject": 13, "user": [13, 60, 65, 82, 84, 85, 145], "should": [13, 24, 31, 45, 49, 61, 62], "reli": 13, "behaviour": [13, 24, 25], "For": [13, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 61, 62, 86], "more": [13, 31, 75], "guid": [13, 145], "http": [0, 13, 16, 17, 19, 31, 45, 69, 145], "org": [13, 16, 17, 19, 45], "consum": 13, "list": [13, 16, 19, 22, 24, 25, 27, 29, 31, 55, 57, 58, 59, 85, 86, 116, 145], "devic": [13, 67, 78], "eval": 13, "feed_dict": 13, "session": 13, "compat": 13, "v1": 13, "within": [13, 16, 19, 45, 79, 81, 91, 107, 132], "do": [13, 43, 45, 61, 62, 116], "preced": 13, "n": [13, 16, 18, 19, 22, 24, 25, 27, 31, 43, 45, 49, 81, 82, 83, 91, 107, 125, 132], "befor": [13, 16, 19, 49, 82], "invok": 13, "have": [5, 7, 13, 17, 24, 25, 27, 61, 85, 86], "been": [0, 13, 18, 27, 85, 86, 105, 122, 142, 145], "launch": 13, "either": [13, 75], "specifi": [13, 19, 24, 25, 40, 41, 43, 45, 49, 61, 62, 75, 85], "dictionari": [13, 57, 61, 62, 75], "map": 13, "feed": 13, "run": [1, 10, 11, 13, 92, 108, 133, 145], "descript": 13, "valid": 13, "correspond": [13, 24, 75], "experimental_ref": 13, "deprec": 13, "remov": [13, 75], "futur": [13, 31], "version": [13, 27, 76], "instruct": 13, "updat": [13, 16, 17, 19, 75, 86], "ref": 13, "instead": [13, 43, 45, 82], "get_shap": 13, "tensorshap": 13, "5": [13, 99, 117, 128], "6": [13, 100], "equival": 13, "build": 13, "kera": 13, "unknown": 13, "10": 13, "batch": [13, 31, 49], "infer": 13, "regist": 13, "determin": [13, 22, 24, 25, 27, 29, 31, 49, 50, 57, 58, 59], "without": [6, 13, 56], "kernel": [13, 31, 43, 45, 85, 86, 95, 111, 145], "convert": [13, 40, 41], "debug": 13, "provid": [13, 75, 83, 85], "earli": 13, "trace": 13, "being": [13, 61, 62, 67, 68, 86, 124], "concret": 13, "www": 13, "concrete_funct": 13, "def": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "my_matmul": 13, "propag": 13, "extent": 13, "f": [13, 27, 29, 31, 43, 45, 75, 86], "get_concrete_funct": 13, "tensorspec": 13, "fail": [13, 93, 109], "missmatch": 13, "can": [5, 7, 13, 16, 24, 25, 27, 31, 61], "detect": 13, "cf": 13, "traceback": 13, "recent": 13, "last": [13, 24, 27, 50, 75], "equal": [9, 13, 101, 118, 129, 138], "addit": 13, "inform": 13, "about": 13, "ensure_shap": 13, "set_shap": 13, "augment": 13, "my_fun": 13, "output": [0, 13, 16, 19, 20, 24, 25, 31, 40, 41, 43, 45, 49, 85, 86, 96, 101, 112, 118, 123, 124, 126, 129, 134, 138, 145], "hashabl": 13, "primari": [13, 65], "api": [13, 69], "put": 13, "__hash__": 13, "longer": 13, "except": [13, 78, 85, 86, 93, 109], "x": [13, 16, 18, 19, 22, 24, 25, 27, 29, 31, 34, 40, 41, 43, 45, 57, 58, 59, 70, 71, 72, 73, 74, 75, 92, 108, 133], "y": [13, 16, 18, 19, 27, 31, 40, 41, 43, 45], "z": [13, 43, 45, 49], "tensor_set": 13, "typeerror": [13, 16, 19], "unhash": 13, "tensor_dict": 13, "five": 13, "ten": 13, "deref": 13, "origin": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "recommend": 13, "becaus": 13, "better": 13, "check": [13, 24, 25, 27, 43, 45], "creat": [13, 16, 17, 19, 61, 62, 75, 82, 90, 103, 106, 120, 123, 131, 140], "guarante": 13, "compil": [13, 31], "With": 13, "assert": [13, 58], "here": [13, 31], "match": [13, 49, 83], "new": [13, 16, 19, 31, 40, 41, 75, 99, 103, 115, 120, 128, 136, 140], "allow": 13, "axi": [13, 24, 27, 50], "incompat": 13, "suppli": [13, 49, 82], "merg": 13, "given": [13, 27, 31, 75], "merge_with": 13, "224": 13, "cannot": 13, "alon": 13, "know": 13, "imag": 13, "dataset": [0, 13, 19, 145], "28": 13, "load_imag": 13, "filenam": 13, "raw": 13, "io": [13, 69], "read_fil": 13, "decode_png": 13, "channel": 13, "final": [13, 27, 57, 58, 59, 61, 62], "similarli": 13, "parse_tensor": 13, "could": 13, "even": [13, 145], "serial": 13, "2d": 13, "my_pars": 13, "string_tensor": 13, "out_typ": 13, "concrete_pars": 13, "make": [13, 16, 19, 145], "sure": [13, 61, 62, 86], "work": [13, 27], "ones": [13, 22, 24, 25, 27, 29, 31, 57, 58, 59], "serialize_tensor": 13, "t2": 13, "appli": [13, 16, 18, 74, 82, 92, 96, 105, 108, 112, 122, 126, 133, 134, 142, 145], "exist": [5, 7, 13, 16, 40, 41, 43, 44, 45, 61, 62, 78, 82, 103, 120, 140], "runtim": [13, 145], "incorrect": 13, "inconsist": 13, "between": [13, 16, 19, 25, 40, 41, 82, 96, 112, 126, 134], "static": [5, 7, 13, 31, 40, 41, 43, 44, 45, 61, 62, 81], "modifi": [13, 72, 73], "still": 13, "though": 13, "tensorshapeproto": 13, "thei": [13, 24, 25, 86, 145], "slice": [13, 24, 25, 57, 58, 59, 75], "pairofint": 13, "parent": [16, 22, 24, 25, 27, 29, 31, 43, 44, 45, 57, 58, 59, 145], "k": [16, 19, 25, 27, 43, 45, 58, 75, 78, 82], "repositori": [16, 78, 79, 82, 85, 86, 89, 90, 99, 103, 104, 106, 115, 120, 121, 123, 128, 130, 131, 136, 140, 141, 144], "meta": [7, 16, 19, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 75, 83, 86], "equip": 16, "test_data": [16, 43, 45, 85], "addition": 16, "dimension": [16, 31, 40, 41, 43, 45, 76, 82, 83, 86], "m": [0, 16, 19, 24, 25, 31, 40, 41, 43, 45, 49, 50, 57, 58, 59, 61, 62, 71, 72, 73, 74, 81, 82, 86, 91, 107, 125, 132, 145], "creation": 16, "classmethod": [5, 7, 16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62, 75], "from_df": [16, 19], "column": [6, 16, 17, 19, 24, 25, 31, 78, 81, 82, 91, 107, 132], "lt": [16, 19, 61, 62], "test_x": 16, "head": [16, 19], "test_i": 16, "l": [16, 19, 22, 24, 25, 27, 29, 31, 40, 41, 43, 45, 49, 58, 78, 82, 83], "x_rotat": 16, "rotat": [0, 16, 59, 82, 90, 106, 131, 145], "__x_rotat": 16, "cumul": 16, "normal": [16, 19, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 82, 93, 109], "train": [16, 19, 29, 31, 43, 45, 82], "test": [9, 16, 19, 43, 45, 69, 82, 85, 90, 106, 131, 145], "sampl": [16, 19, 27, 31, 43, 45, 90, 91, 102, 105, 106, 107, 119, 122, 131, 132, 139, 142, 145], "row": [16, 19, 24, 25, 31, 81, 82, 83, 91, 107, 132], "y_split": [16, 19], "split": [16, 19, 27], "just": [16, 17, 19], "lth": [16, 19], "rang": [16, 19, 57, 58, 59, 61, 62, 82, 86], "indic": [0, 16, 19, 24, 25, 57, 58, 59, 86, 145], "from_csv": [16, 19], "target": [16, 19], "metadata": [16, 19], "csv_option": [16, 17, 19], "pydata": [16, 17, 19], "doc": [16, 17, 19, 45], "stabl": [16, 17, 19], "read_csv": [6, 16, 17, 19, 78], "html": [16, 17, 19, 45, 69], "df": [16, 17, 18, 19, 27], "into_k_fold": [16, 19, 82], "shuffle_before_fold": [16, 19, 82], "repo": [16, 19, 79, 82, 85, 86], "absolut": [16, 19, 82], "inclus": [16, 19, 82], "improp": [16, 19, 82], "both": [16, 19, 27, 31, 82], "To": [16, 19, 31, 82], "suppress": [16, 19, 82], "neg": [16, 19, 82], "integ": [16, 19, 31, 82], "shuffl": [16, 19, 82], "windowspath": [17, 89, 104, 121, 125, 130, 141, 144], "empti": [5, 7, 17, 40, 41, 43, 44, 45, 57, 61, 62, 67, 68, 75], "encapsul": [6, 17, 18, 49, 59, 61, 62], "overwrit": [17, 82, 103, 120, 140], "keyword": [17, 27], "argument": [17, 27], "relev": [0, 17, 145], "is_empti": 17, "accord": [17, 43, 45], "fold": [18, 19, 43, 45, 78, 79, 82, 85, 86, 99, 115, 128, 136], "assum": [18, 27, 31, 49], "uniform": 18, "distribut": [18, 27, 43, 45, 76], "u": [18, 59], "invers": 18, "probabl": [18, 27, 31, 49], "transform": 18, "mean": [18, 24, 25, 27, 28, 29, 31, 43, 45, 49, 83], "unit": [18, 24, 25], "varianc": [0, 18, 24, 25, 27, 31, 40, 41, 43, 45, 49, 58, 82, 83, 86, 97, 113, 127, 135, 145], "alreadi": 18, "apply_to": 18, "undo_from": 18, "undo": 18, "unnorm": 18, "These": [19, 29], "analyz": [19, 57, 58, 59], "further": 19, "extens": [20, 21, 23, 26, 30, 78, 145], "multi": [20, 40, 41, 43, 45, 76], "mutual": 20, "depend": [20, 24, 43, 45, 85, 86, 145], "cholesky_diagonal_lower_bound": 22, "001": 22, "non": [5, 7, 22, 24, 25, 27, 29, 31, 40, 41, 43, 44, 45, 57, 58, 59, 61, 62], "float": [6, 9, 22, 31, 67, 74, 76, 83, 101, 118, 129, 138], "covari": [22, 24, 25, 27, 31, 40, 41, 49, 83, 86, 94, 110], "mutabl": 22, "through": 22, "cholesky_diagon": [22, 27], "cholesky_lower_triangl": 22, "symmetr": [22, 24, 25], "posit": [22, 24, 25, 27, 31], "express": [22, 27], "lower": [22, 27, 31], "bound": [22, 27, 31], "choleski": [22, 27, 31, 43, 45, 49], "decomposit": [22, 27, 43, 45, 49], "triangular": 22, "value_to_broadcast": 22, "readi": 22, "value_times_ey": 22, "cartesian": 22, "product": [22, 49], "ey": 22, "transpos": 22, "ident": [22, 82], "multipli": [22, 24, 25, 43, 45], "transposit": [22, 55], "ctor": [22, 24, 25, 27, 29, 31, 57, 58, 59], "same": [22, 24, 25, 27, 29, 31, 57, 58, 59], "name_scop": [22, 24, 25, 27, 29, 31, 57, 58, 59], "instanc": [22, 24, 25, 27, 29, 31, 57, 58, 59, 75], "non_trainable_vari": [22, 24, 25, 27, 29, 31, 57, 58, 59], "sequenc": [6, 22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 74, 75, 76, 83, 86], "trainabl": [22, 24, 25, 27, 29, 31, 40, 41, 44, 57, 58, 59], "submodul": [22, 24, 25, 27, 29, 31, 57, 58, 59], "reflect": [22, 24, 25, 27, 29, 31, 57, 58, 59], "perform": [22, 24, 25, 27, 29, 31, 57, 58, 59, 61, 62], "reason": [22, 24, 25, 27, 29, 31, 57, 58, 59], "wish": [22, 24, 25, 27, 29, 31, 57, 58, 59], "cach": [22, 24, 25, 27, 29, 31, 57, 58, 59], "don": [22, 24, 25, 27, 29, 31, 57, 58, 59], "expect": [22, 24, 25, 27, 29, 31, 57, 58, 59], "sort": [22, 24, 25, 27, 29, 31, 57, 58, 59], "recurs": [22, 24, 25, 27, 29, 31, 57, 58, 59, 79, 85, 86], "breadth": [22, 24, 25, 27, 29, 31, 57, 58, 59], "sub": [22, 24, 25, 27, 29, 31, 57, 58, 59], "found": [22, 24, 25, 27, 29, 31, 57, 58, 59, 75, 86], "trainable_vari": [22, 24, 25, 27, 29, 31, 57, 58, 59], "with_name_scop": [22, 24, 25, 27, 29, 31, 57, 58, 59], "decor": [22, 24, 25, 27, 29, 31, 57, 58, 59], "automat": [22, 24, 25, 27, 29, 31, 49, 57, 58, 59, 67], "enter": [22, 24, 25, 27, 29, 31, 57, 58, 59], "scope": [22, 24, 25, 27, 29, 31, 57, 58, 59], "mymodul": [22, 24, 25, 27, 29, 31, 57, 58, 59], "__call__": [22, 24, 25, 27, 29, 31, 57, 58, 59], "hasattr": [22, 24, 25, 27, 29, 31, 57, 58, 59], "w": [22, 24, 25, 27, 29, 31, 57, 58, 59], "random": [22, 24, 25, 27, 29, 31, 57, 58, 59, 82], "abov": [22, 24, 25, 27, 29, 31, 57, 58, 59], "would": [22, 24, 25, 27, 29, 31, 57, 58, 59], "mod": [22, 24, 25, 27, 29, 31, 57, 58, 59], "my_modul": [22, 24, 25, 27, 29, 31, 57, 58, 59], "wrap": [22, 24, 25, 27, 29, 31, 57, 58, 59], "lengthscal": [24, 25, 31, 40, 41], "active_dim": [24, 25], "anisotropicstationari": 24, "stationari": 24, "deriv": 24, "k_d": [24, 25], "pairwis": 24, "differ": [24, 25], "scale": [24, 25, 43, 45, 74], "\u2113": [24, 25], "x2\u1d40": [24, 25], "signal": [24, 25, 101, 118, 129, 138], "is_lengthscales_train": [24, 25], "them": [24, 25], "lengthscales_neat": [24, 25], "k_diag": [24, 25], "k_unit_vari": [24, 25], "x2": [24, 25], "optimis": [24, 25, 93, 109], "where": [24, 25, 27, 31, 43], "k_d_unit_vari": [24, 25], "k_d_apply_vari": [24, 25], "reshap": [24, 25, 76], "ln": [24, 25, 27, 43, 45], "ard": [24, 25], "activ": [0, 24, 25, 145], "on_separate_dim": [24, 25], "other": [24, 25, 40, 41, 49, 85, 86], "over": [24, 25, 31, 82, 85], "overlap": [24, 25], "separ": [24, 25], "scaled_difference_matrix": [24, 25], "correct": [24, 25], "slice_cov": [24, 25], "cov": [24, 25], "requir": [24, 25, 29, 31, 61, 62, 71, 72, 73, 86], "turn": [24, 25, 29], "flatten": [24, 25], "full": [24, 25, 58, 81], "mostationari": [25, 31], "radial": 25, "basi": [0, 25, 90, 105, 106, 122, 131, 142, 145], "exponenti": [25, 49], "equat": 25, "\u03c3\u00b2": 25, "exp": 25, "\u00bd": 25, "r\u00b2": 25, "r": [25, 31, 78], "euclidean": 25, "distanc": 25, "point": [25, 31], "drawn": [25, 31], "gp": [31, 57, 58, 59, 61, 62, 85, 86], "infinit": 25, "differenti": 25, "quadraturelikelihood": 27, "multivari": [27, 83], "appropri": [27, 82], "uncertainti": 27, "associ": 27, "believ": 27, "veri": 27, "small": 27, "lead": 27, "numer": [27, 45, 49], "instabl": 27, "1e": [9, 27], "therefor": 27, "impos": 27, "symmetri": 27, "forward": 27, "concaten": [27, 70, 75, 78], "split_axis_shap": 27, "length": 27, "conditional_mean": 27, "condit": [0, 27, 145], "y\u2081": 27, "y\u2096": 27, "observation_dim": 27, "latent_dim": 27, "conditional_vari": 27, "margin": [0, 13, 27, 31, 57, 58, 59, 145], "var": 27, "log_prob": 27, "log": [27, 31], "densiti": [27, 31, 49], "p": [27, 31], "observ": [27, 31], "pdf": [0, 27, 49, 145], "predict_log_dens": [27, 31], "fmu": 27, "fvar": 27, "latent": [27, 31], "datum": 27, "predict": [27, 28, 29, 31, 43, 45], "q": 27, "predict_mean_and_var": 27, "dy": 27, "y\u00b2": 27, "\u00b2": 27, "variational_expect": 27, "statist": [27, 96, 112, 126, 134], "prior": [28, 29, 31], "output_dim": [29, 31], "meanfunct": 29, "mogpr": 29, "basic": [29, 47, 61, 62], "one": [29, 103, 120, 140], "constitut": 29, "absenc": 29, "union": 29, "mean_funct": [31, 145], "noise_vari": [31, 43, 45, 82], "gpmodel": 31, "internaldatatraininglossmixin": 31, "vanilla": 31, "likelihood": [31, 43, 45, 94, 110, 145], "treat": [31, 43, 45], "independ": [31, 43, 45, 85, 86, 96, 112, 126, 134], "mathbf": 31, "mathcal": 31, "sigma_n": 31, "maximis": [0, 31, 145], "_marginal_": 31, "hyperparamet": 31, "theta": [31, 59], "integr": 31, "form": 31, "kxx": 31, "momeanfunct": 31, "inputdata": 31, "outputdata": 31, "well": 31, "necessari": [31, 85], "maximum_log_likelihood_object": 31, "maximum": 31, "estim": 31, "maxim": 31, "g": [31, 67, 73, 86, 145], "elbo": 31, "variat": 31, "log_marginal_likelihood": 31, "predict_f": 31, "xnew": 31, "full_cov": 31, "full_output_cov": 31, "noisi": [31, 43, 45], "regardless": 31, "avoid": 31, "ambigu": 31, "calc_num_latent_gp": 31, "nice": 31, "awar": 31, "specif": [31, 61, 62], "howev": [31, 67], "num_latent_gp": 31, "bit": 31, "broken": 31, "fix": [31, 97, 113, 127, 135], "There": 31, "slightli": 31, "problemat": 31, "assumpt": 31, "github": [0, 31, 145], "com": [0, 31, 145], "issu": 31, "1343": 31, "calc_num_latent_gps_from_data": 31, "log_posterior_dens": 31, "arg": 31, "posterior": 31, "respect": 31, "gpmc": 31, "sgpmc": 31, "sensibli": 31, "log_prior_dens": 31, "sum": 31, "constrain": 31, "predict_f_sampl": 31, "num_sampl": 31, "draw": 31, "extra": 31, "correl": 31, "dens": 31, "num_data": 31, "uncorrel": 31, "predict_i": 31, "held": 31, "out": [31, 75], "training_loss": 31, "loss": 31, "training_loss_closur": 31, "conveni": 31, "closur": 31, "itself": [31, 82], "minim": [31, 45, 49], "scipi": [31, 45, 67], "callabl": [31, 74, 81, 82], "interfac": [40, 43, 48, 60, 65, 84], "contract": 40, "share": [40, 41], "anisotrop": [85, 86], "isotrop": [40, 41, 43, 45, 85, 86, 95, 111], "mere": [40, 41, 44], "type_identifi": [40, 41], "__module__": 40, "__name__": 40, "typefromidentifi": [40, 41], "typeidentifi": [40, 41], "_typeidentifi": [40, 41], "typefromparamet": [40, 41], "recogn": [40, 41], "across": [40, 41, 78, 79, 85, 86], "broadcast_paramet": [40, 41, 43, 45], "variance_shap": [40, 41], "higher": [40, 41, 43, 45], "shrinkag": [40, 41, 43, 45], "unchang": [40, 41, 43, 45], "silent": [40, 41, 43, 45], "nop": [40, 41], "expans": [40, 41], "straightforward": [40, 41], "per": [40, 41], "attempt": [40, 41], "made": [40, 41], "shrink": [40, 41], "implemented_in_": [], "off_diagon": [], "is_read": [43, 45, 85], "is_independ": [], "is_isotrop": [43, 45, 85, 86], "kernel_paramet": [43, 45, 85], "gpinterfac": [], "setup": [], "hous": [43, 45, 78, 82, 85, 86, 89, 104, 121, 130, 141, 144], "restrict": [43, 45], "read_from_fil": [43, 45], "mi": [43, 45], "hyper": [43, 45], "bfg": 45, "algorithm": 45, "format": 45, "y_instead_of_f": [43, 45], "o": [0, 43, 45, 72, 145], "nois": [43, 45, 83, 90, 96, 97, 101, 106, 112, 113, 118, 123, 124, 126, 127, 129, 131, 134, 135, 138], "std": [43, 45], "k_cho": [43, 45], "lnxln": [43, 45], "els": [43, 45, 75], "k_inv_i": [43, 45], "pre": [43, 45], "loxln": [43, 45], "lo": [43, 45], "chosolv": [43, 45], "check_k_inv_i": 45, "FOR": 45, "purpos": [45, 49], "toler": [9, 45], "kernel_folder_nam": [43, 45], "identifi": [], "never": [], "extern": [], "desir": [], "noth": [43, 45], "_fold": [43, 45], "compris": [43, 45, 75, 145], "three": [43, 45], "score": [43, 45], "frame": [5, 7, 40, 41, 43, 44, 45, 61, 62], "test_result_csv": [43, 45], "up": [43, 45, 67], "0001": [], "log_margin": [], "coeffici": [0, 145], "close": [56, 57, 58, 59, 61, 62, 86, 116], "wide": [57, 58, 59], "collect": [57, 58, 59, 82], "especi": [57, 58, 59], "_calcul": [], "everyth": [57, 58, 59], "closedindex": [], "is_t_parti": [58, 62], "forc": [58, 62], "mm": 58, "effect": [58, 75], "free": 58, "wmm": [58, 62], "rankequ": 58, "j": 58, "mix": 58, "instantiat": [], "expon": 49, "variance_cho_diagon": 49, "log_pdf": [], "variance_cho": 49, "is_variance_diagon": 49, "float64": [13, 49], "lbunch": 49, "logarithm": 49, "un": [49, 82], "det": 49, "factor": 49, "effici": 49, "accuraci": 49, "ratio": [49, 101, 118, 129, 138], "popul": 49, "adequ": 49, "embrac": 49, "consecut": [49, 86], "insert": [49, 75, 78], "usual": 49, "sometim": 49, "ein": [52, 53, 54], "lijk": [52, 53, 54], "kind": [61, 62, 86], "is_error_calcul": [61, 62, 86], "sobol": [0, 56, 57, 58, 59, 61, 73, 86, 145], "dispos": [61, 62], "useless": [61, 62], "onc": [61, 62], "total": [61, 62, 86, 116], "le": [61, 62], "outsid": [61, 62, 86, 145], "memori": [61, 62, 86], "intens": [61, 62, 86], "leav": [61, 62, 86], "flag": [61, 62, 86], "v": [75, 125], "stddev": [0, 2, 101, 118, 129, 138], "enum": [61, 62], "manag": [66, 67, 68], "environ": [10, 11], "undertak": [60, 85, 86], "ed": [67, 68], "what": [67, 68], "undertaken": [], "end": 67, "regex": 67, "pu": 67, "logic": 67, "alloc": 67, "straight": [6, 62, 67, 78, 82, 85], "inop": 67, "due": [67, 93, 109], "config": 67, "run_functions_eagerli": 67, "api_doc": [], "_": [0, 69, 145], "is_inlin": 68, "inlin": 68, "linebreak": 68, "top": 68, "tail": 68, "paragraph": 68, "taken": 69, "salib": 69, "readthedoc": 69, "en": 69, "latest": 69, "test_funct": 69, "ishigami": [70, 133], "balanc": [70, 71, 92, 108, 133], "scalar": [70, 71, 72, 73, 75, 92, 108, 133], "sin": [70, 71, 92, 108, 133], "oakley2004": [70, 133], "balanced_quad7": [70, 72, 133], "lin7": [70, 72, 133], "quad7": [70, 72, 133], "sobol_g": [70, 133], "strong5_2": [70, 73, 133], "strong5_4": [70, 73, 133], "weak5_2": [70, 73, 133], "oaklei": 72, "hagan": 72, "2004": 72, "loc": 74, "vectorlik": 74, "offset": 74, "functon": 75, "littl": 75, "than": 75, "item": [75, 145], "concat": 75, "subvector": 75, "pseudo": 75, "clear": 75, "copi": [5, 6, 7, 16, 19, 40, 41, 43, 44, 45, 61, 62, 75], "shallow": 75, "fromkei": 75, "iter": [6, 75], "like": [75, 82], "view": 75, "pop": 75, "keyerror": 75, "popitem": 75, "lifo": 75, "setdefault": 75, "lack": 75, "throughout": 76, "prod": 76, "endpoint": 76, "newshap": 76, "ignore_miss": 78, "minu": 78, "to_csv": [6, 78], "write_opt": 78, "float_format": 78, "6f": 78, "from_fold": 78, "dst": [16, 19, 78, 79], "is_existing_delet": 78, "destin": [5, 7, 40, 41, 43, 44, 45, 61, 62, 78], "delet": [5, 7, 40, 41, 43, 44, 45, 61, 62, 78], "recreat": 78, "src": 79, "rel": [79, 86], "filenotfounderror": [79, 85, 86], "ignore_except": [85, 86], "nearest": 85, "ancestor": 85, "isotropi": 85, "hierarchi": [1, 85], "continu": 85, "throw": 85, "aggreg": 85, "first_ord": [86, 116], "furthermor": 86, "ignor": [86, 93, 109], "encount": 86, "halt": 86, "experi": 80, "signatur": 81, "latin_hypercub": 81, "is_cent": [81, 91, 107, 132], "latin": [81, 91, 107, 132], "hypercub": [81, 91, 107, 132], "boolean": [81, 91, 107, 132], "centr": [81, 91, 107, 132], "cell": [81, 91, 107, 132], "randomli": [81, 91, 107, 132], "full_factori": 81, "factori": 81, "base_fold": [], "function_vector": 82, "overwrite_exist": 82, "gaussiannois": 82, "sit": 82, "experiment": 82, "noise_magnitud": 82, "homoskedast": [82, 83], "sub_fold": 82, "extra_column": 82, "stochastic_rot": [], "stochast": [0, 97, 113, 127, 135, 145], "rotate_fold": 82, "uniformli": 82, "un_rotate_fold": 82, "matrixlik": 83, "co": 83, "magnitud": 83, "is_stochast": [], "artifici": 83, "label": [61, 62, 83], "scheme": 83, "suitabl": 83, "__format__": 83, "cannib": [87, 88, 145], "fc1ram": [89, 104, 121, 125, 130, 141, 144], "research": [89, 104, 121, 125, 130, 141, 144], "dat": [89, 104, 121, 125, 130, 141, 144], "softwaretest": [89, 104, 121, 125, 130, 141, 144], "welcom": 145, "reduct": [0, 145], "novel": [0, 145], "approach": [0, 145], "subspac": [0, 145], "AS": [0, 145], "those": 145, "unfamiliar": 145, "hyperlink": 145, "semin": [], "mathemat": 145, "behind": 145, "softwar": 145, "cover": [0, 145], "paper": [0, 145], "peer": 145, "review": 145, "public": 145, "simpli": 145, "place": 145, "pythonpath": 145, "site": 145, "installation_test": 145, "anywher": 145, "pyproject": 145, "toml": 145, "organ": 145, "modular": 145, "old": 145, "context": [10, 11, 145], "script": [87, 88, 145], "No": 145, "tabl": 145, "expos": 145, "task": [], "highli": [], "advanc": 145, "achiev": [], "directori": [0, 2], "mathsf": 83, "mathtt": [], "ymbj": [], "abbr": [], "ymca": [], "glossari": [1, 2], "technic": [0, 145], "direct": 145, "regard": 145, "bespok": 145, "subsapc": [], "techniqu": [0, 145], "constantin": [0, 145], "2014": [0, 145], "align": [0, 145], "eigenvector": [0, 145], "jacobian": [0, 145], "assess": [0, 145], "system": [0, 145], "varieti": [0, 145], "broadli": [0, 145], "saltelli": [0, 145], "et": [0, 145], "al": [0, 145], "2007": [0, 145], "razavi": [0, 145], "2021": [0, 145], "deal": [0, 145], "exclus": [0, 145], "ilya": [0, 145], "somewhat": [0, 145], "describ": [0, 145], "gori": [0, 145], "2023": [0, 145], "blob": [0, 145], "theori": [0, 145], "20of": [0, 145], "20determin": [0, 145], "gaussianwithout2pi": [], "quit": [0, 145], "thoroughli": [0, 145], "rasmussen": [0, 145], "william": [0, 145], "2005": [0, 145], "mogp": [25, 31, 40, 42, 43, 44, 60, 85], "is_covari": [40, 41, 43, 45, 83, 85, 86], "variant": [41, 86], "likelihood_vari": [43, 45, 85], "stabil": 49, "pi": 49, "logpdf": [], "mnemon": [], "closedsobol": [58, 59, 62], "marginalis": [61, 62], "ad": [90, 101, 106, 118, 123, 129, 131, 138], "25": [125, 129, 138], "normalis": [101, 118, 129, 138], "400": [119, 125, 139], "datapoint": [102, 119, 139], "add": 124, "00": 125, "topic": 145, "advis": 145, "advic": 145, "much": 145, "benchmark_gsa": 145, "gpr_from_funct": 145, "gsa_from_funct": 145, "repo_from_csv": 145, "repo_from_funct": 145, "sai": 145, "galleri": 145, "archetyp": 145, "root": 82, "ext": 82, "suffix": 82, "orthogon": 82, "wrong": 82, "is_random": 83, "summaris": 145, "term": [], "cunt": [], "part": 145, "penultim": 145, "conceptu": 1, "interc": 49, "sigma": 49, "determinant_vector": [], "_namedtupl": [], "field_default": [], "asdict": [], "move": [5, 7, 40, 41, 43, 44, 45, 61, 62], "dst_folder": [5, 7, 40, 41, 43, 44, 45, 61, 62], "src_folder": [5, 7, 40, 41, 43, 44, 45, 61, 62], "anyth": [5, 7, 40, 41, 43, 44, 45, 61, 62], "arraylik": 6, "written": 6, "whenev": 6, "clean_copi": [16, 19], "clean": [16, 19], "64": 9, "contextmanag": [], "nan": 13, "u14": [5, 7, 61], "member": [5, 7, 61], "read_data": [7, 40, 41, 44], "toi": 145, "calibr": [7, 40, 41, 44, 45, 61, 62, 85, 145], "sqrt": 49, "expand_dim": 49, "ax": 49, "dim": 49, "cho_diag": 49, "intenum": [61, 62], "overriden": [61, 62], "super": [61, 62], "200": 102, "04": 118, "Of": 50, "_calibr": [57, 58, 59]}, "objects": {"": [[2, 0, 0, "-", "romcomma"]], "romcomma": [[3, 0, 0, "-", "base"], [14, 0, 0, "-", "data"], [20, 0, 0, "-", "gpf"], [38, 0, 0, "-", "gpr"], [46, 0, 0, "-", "gsa"], [63, 0, 0, "-", "rom"], [65, 0, 0, "-", "run"], [87, 0, 0, "-", "user"]], "romcomma.base": [[4, 0, 0, "-", "classes"], [8, 0, 0, "-", "definitions"]], "romcomma.base.classes": [[5, 1, 1, "", "Data"], [6, 1, 1, "", "Frame"], [7, 1, 1, "", "Model"]], "romcomma.base.classes.Data": [[5, 1, 1, "", "NamedTuple"], [5, 3, 1, "", "__init__"], [5, 3, 1, "", "copy"], [5, 3, 1, "", "delete"], [5, 3, 1, "", "empty"], [5, 3, 1, "", "move"], [5, 3, 1, "", "read"]], "romcomma.base.classes.Data.NamedTuple": [[5, 2, 1, "", "NotImplemented"], [5, 3, 1, "", "count"], [5, 3, 1, "", "index"]], "romcomma.base.classes.Frame": [[6, 3, 1, "", "__init__"], [6, 3, 1, "", "broadcast_value"], [6, 2, 1, "", "csv"], [6, 3, 1, "", "write"]], "romcomma.base.classes.Model": [[7, 1, 1, "", "Data"], [7, 4, 1, "", "META"], [7, 3, 1, "", "__init__"]], "romcomma.base.classes.Model.Data": [[7, 1, 1, "", "NamedTuple"], [7, 3, 1, "", "copy"], [7, 3, 1, "", "delete"], [7, 3, 1, "", "empty"], [7, 3, 1, "", "move"], [7, 3, 1, "", "read"]], "romcomma.base.classes.Model.Data.NamedTuple": [[7, 2, 1, "", "NotImplemented"], [7, 3, 1, "", "count"], [7, 3, 1, "", "index"]], "romcomma.base.definitions": [[9, 5, 1, "", "EFFECTIVELY_ZERO"], [10, 6, 1, "", "FLOAT"], [11, 6, 1, "", "INT"], [12, 1, 1, "", "NP"], [13, 1, 1, "", "TF"]], "romcomma.base.definitions.NP": [[12, 2, 1, "", "Array"], [12, 2, 1, "", "Covector"], [12, 2, 1, "", "Matrix"], [12, 2, 1, "", "Tensor"], [12, 2, 1, "", "Tensor1"], [12, 2, 1, "", "Tensor2"], [12, 2, 1, "", "Tensor3"], [12, 2, 1, "", "Tensor4"], [12, 2, 1, "", "Tensor5"], [12, 2, 1, "", "Tensor6"], [12, 2, 1, "", "Tensor7"], [12, 2, 1, "", "Tensor8"], [12, 2, 1, "", "Vector"], [12, 3, 1, "", "__init__"]], "romcomma.base.definitions.TF": [[13, 2, 1, "", "Array"], [13, 2, 1, "", "Covector"], [13, 2, 1, "", "Matrix"], [13, 2, 1, "", "NaN"], [13, 2, 1, "", "PairOfInts"], [13, 2, 1, "", "Slice"], [13, 1, 1, "", "Tensor"], [13, 2, 1, "", "Tensor1"], [13, 2, 1, "", "Tensor2"], [13, 2, 1, "", "Tensor3"], [13, 2, 1, "", "Tensor4"], [13, 2, 1, "", "Tensor5"], [13, 2, 1, "", "Tensor6"], [13, 2, 1, "", "Tensor7"], [13, 2, 1, "", "Tensor8"], [13, 2, 1, "", "Vector"], [13, 3, 1, "", "__init__"]], "romcomma.base.definitions.TF.Tensor": [[13, 3, 1, "", "consumers"], [13, 4, 1, "", "device"], [13, 4, 1, "", "dtype"], [13, 3, 1, "", "eval"], [13, 3, 1, "", "experimental_ref"], [13, 3, 1, "", "get_shape"], [13, 4, 1, "", "graph"], [13, 4, 1, "", "name"], [13, 4, 1, "", "op"], [13, 3, 1, "", "ref"], [13, 3, 1, "", "set_shape"], [13, 4, 1, "", "shape"], [13, 4, 1, "", "value_index"]], "romcomma.data": [[15, 0, 0, "-", "storage"]], "romcomma.data.storage": [[16, 1, 1, "", "Fold"], [17, 1, 1, "", "Frame"], [18, 1, 1, "", "Normalization"], [19, 1, 1, "", "Repository"]], "romcomma.data.storage.Fold": [[16, 4, 1, "", "K"], [16, 4, 1, "", "L"], [16, 4, 1, "", "M"], [16, 4, 1, "", "N"], [16, 4, 1, "", "X"], [16, 4, 1, "", "X_rotation"], [16, 4, 1, "", "Y"], [16, 3, 1, "", "Y_split"], [16, 4, 1, "", "Y_splits"], [16, 3, 1, "", "__init__"], [16, 3, 1, "", "clean_copy"], [16, 4, 1, "", "folds"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_df"], [16, 3, 1, "", "from_dfs"], [16, 3, 1, "", "into_K_folds"], [16, 4, 1, "", "test_x"], [16, 4, 1, "", "test_y"]], "romcomma.data.storage.Frame": [[17, 4, 1, "", "CSV_OPTIONS"], [17, 3, 1, "", "__init__"], [17, 4, 1, "", "is_empty"], [17, 3, 1, "", "write"]], "romcomma.data.storage.Normalization": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "apply_to"], [18, 3, 1, "", "undo_from"]], "romcomma.data.storage.Repository": [[19, 4, 1, "", "K"], [19, 4, 1, "", "L"], [19, 4, 1, "", "M"], [19, 4, 1, "", "N"], [19, 4, 1, "", "X"], [19, 4, 1, "", "Y"], [19, 3, 1, "", "Y_split"], [19, 4, 1, "", "Y_splits"], [19, 3, 1, "", "__init__"], [19, 3, 1, "", "clean_copy"], [19, 4, 1, "", "folds"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_df"], [19, 3, 1, "", "into_K_folds"]], "romcomma.gpf": [[21, 0, 0, "-", "base"], [23, 0, 0, "-", "kernels"], [26, 0, 0, "-", "likelihoods"], [28, 0, 0, "-", "mean_functions"], [30, 0, 0, "-", "models"], [32, 0, 0, "-", "tests"]], "romcomma.gpf.base": [[22, 1, 1, "", "Variance"]], "romcomma.gpf.base.Variance": [[22, 3, 1, "", "__init__"], [22, 4, 1, "", "cholesky"], [22, 4, 1, "", "name"], [22, 4, 1, "", "name_scope"], [22, 4, 1, "", "non_trainable_variables"], [22, 4, 1, "", "shape"], [22, 4, 1, "", "submodules"], [22, 4, 1, "", "trainable_variables"], [22, 4, 1, "", "value"], [22, 3, 1, "", "value_times_eye"], [22, 4, 1, "", "value_to_broadcast"], [22, 4, 1, "", "variables"], [22, 3, 1, "", "with_name_scope"]], "romcomma.gpf.kernels": [[24, 1, 1, "", "MOStationary"], [25, 1, 1, "", "RBF"]], "romcomma.gpf.kernels.MOStationary": [[24, 3, 1, "", "K_d"], [24, 3, 1, "", "K_d_apply_variance"], [24, 3, 1, "", "K_d_unit_variance"], [24, 3, 1, "", "K_diag"], [24, 3, 1, "", "K_unit_variance"], [24, 3, 1, "", "__init__"], [24, 4, 1, "", "ard"], [24, 4, 1, "", "lengthscales_neat"], [24, 4, 1, "", "name"], [24, 4, 1, "", "name_scope"], [24, 4, 1, "", "non_trainable_variables"], [24, 3, 1, "", "on_separate_dims"], [24, 3, 1, "", "scaled_difference_matrix"], [24, 3, 1, "", "slice"], [24, 3, 1, "", "slice_cov"], [24, 4, 1, "", "submodules"], [24, 4, 1, "", "trainable_variables"], [24, 4, 1, "", "variables"], [24, 3, 1, "", "with_name_scope"]], "romcomma.gpf.kernels.RBF": [[25, 3, 1, "", "K_d"], [25, 3, 1, "", "K_d_apply_variance"], [25, 3, 1, "", "K_d_unit_variance"], [25, 3, 1, "", "K_diag"], [25, 3, 1, "", "K_unit_variance"], [25, 3, 1, "", "__init__"], [25, 4, 1, "", "ard"], [25, 4, 1, "", "lengthscales_neat"], [25, 4, 1, "", "name"], [25, 4, 1, "", "name_scope"], [25, 4, 1, "", "non_trainable_variables"], [25, 3, 1, "", "on_separate_dims"], [25, 3, 1, "", "scaled_difference_matrix"], [25, 3, 1, "", "slice"], [25, 3, 1, "", "slice_cov"], [25, 4, 1, "", "submodules"], [25, 4, 1, "", "trainable_variables"], [25, 4, 1, "", "variables"], [25, 3, 1, "", "with_name_scope"]], "romcomma.gpf.likelihoods": [[27, 1, 1, "", "MOGaussian"]], "romcomma.gpf.likelihoods.MOGaussian": [[27, 3, 1, "", "N"], [27, 3, 1, "", "__init__"], [27, 3, 1, "", "conditional_mean"], [27, 3, 1, "", "conditional_variance"], [27, 3, 1, "", "log_prob"], [27, 4, 1, "", "name"], [27, 4, 1, "", "name_scope"], [27, 4, 1, "", "non_trainable_variables"], [27, 3, 1, "", "predict_log_density"], [27, 3, 1, "", "predict_mean_and_var"], [27, 3, 1, "", "split_axis_shape"], [27, 4, 1, "", "submodules"], [27, 4, 1, "", "trainable_variables"], [27, 4, 1, "", "variables"], [27, 3, 1, "", "variational_expectations"], [27, 3, 1, "", "with_name_scope"]], "romcomma.gpf.mean_functions": [[29, 1, 1, "", "MOMeanFunction"]], "romcomma.gpf.mean_functions.MOMeanFunction": [[29, 3, 1, "", "__init__"], [29, 4, 1, "", "functions"], [29, 4, 1, "", "name"], [29, 4, 1, "", "name_scope"], [29, 4, 1, "", "non_trainable_variables"], [29, 4, 1, "", "output_dim"], [29, 4, 1, "", "submodules"], [29, 4, 1, "", "trainable_variables"], [29, 4, 1, "", "variables"], [29, 3, 1, "", "with_name_scope"]], "romcomma.gpf.models": [[31, 1, 1, "", "MOGPR"]], "romcomma.gpf.models.MOGPR": [[31, 4, 1, "", "L"], [31, 4, 1, "", "M"], [31, 3, 1, "", "__init__"], [31, 3, 1, "", "calc_num_latent_gps"], [31, 3, 1, "", "calc_num_latent_gps_from_data"], [31, 3, 1, "", "log_marginal_likelihood"], [31, 3, 1, "", "log_posterior_density"], [31, 3, 1, "", "log_prior_density"], [31, 3, 1, "", "maximum_log_likelihood_objective"], [31, 4, 1, "", "name"], [31, 4, 1, "", "name_scope"], [31, 4, 1, "", "non_trainable_variables"], [31, 3, 1, "", "predict_f"], [31, 3, 1, "", "predict_f_samples"], [31, 3, 1, "", "predict_log_density"], [31, 3, 1, "", "predict_y"], [31, 4, 1, "", "submodules"], [31, 4, 1, "", "trainable_variables"], [31, 3, 1, "", "training_loss"], [31, 3, 1, "", "training_loss_closure"], [31, 4, 1, "", "variables"], [31, 3, 1, "", "with_name_scope"]], "romcomma.gpf.tests": [[33, 6, 1, "", "covariance"], [34, 6, 1, "", "increment"], [35, 6, 1, "", "kernel"], [36, 6, 1, "", "likelihood"], [37, 6, 1, "", "regression_data"]], "romcomma.gpr": [[39, 0, 0, "-", "kernels"], [42, 0, 0, "-", "models"]], "romcomma.gpr.kernels": [[40, 1, 1, "", "Kernel"], [41, 1, 1, "", "RBF"]], "romcomma.gpr.kernels.Kernel": [[40, 1, 1, "", "Data"], [40, 4, 1, "", "L"], [40, 4, 1, "", "M"], [40, 4, 1, "", "META"], [40, 4, 1, "", "TYPE_IDENTIFIER"], [40, 3, 1, "", "TypeFromIdentifier"], [40, 3, 1, "", "TypeFromParameters"], [40, 3, 1, "", "__init__"], [40, 3, 1, "", "broadcast_parameters"], [40, 3, 1, "", "calibrate"], [40, 4, 1, "", "implementation"], [40, 4, 1, "", "is_covariant"]], "romcomma.gpr.kernels.Kernel.Data": [[40, 2, 1, "", "NamedTuple"], [40, 3, 1, "", "copy"], [40, 3, 1, "", "delete"], [40, 3, 1, "", "empty"], [40, 3, 1, "", "move"], [40, 3, 1, "", "read"]], "romcomma.gpr.kernels.RBF": [[41, 1, 1, "", "Data"], [41, 4, 1, "", "L"], [41, 4, 1, "", "M"], [41, 2, 1, "", "META"], [41, 2, 1, "", "TYPE_IDENTIFIER"], [41, 3, 1, "", "TypeFromIdentifier"], [41, 3, 1, "", "TypeFromParameters"], [41, 3, 1, "", "__init__"], [41, 3, 1, "", "broadcast_parameters"], [41, 3, 1, "", "calibrate"], [41, 4, 1, "", "implementation"], [41, 4, 1, "", "is_covariant"]], "romcomma.gpr.kernels.RBF.Data": [[41, 2, 1, "", "NamedTuple"], [41, 3, 1, "", "copy"], [41, 3, 1, "", "delete"], [41, 3, 1, "", "empty"], [41, 3, 1, "", "move"], [41, 3, 1, "", "read"]], "romcomma.gpr.models": [[43, 1, 1, "", "GPR"], [44, 1, 1, "", "Likelihood"], [45, 1, 1, "", "MOGP"]], "romcomma.gpr.models.GPR": [[43, 1, 1, "", "Data"], [43, 4, 1, "", "KERNEL_FOLDER_NAME"], [43, 4, 1, "", "K_cho"], [43, 4, 1, "", "K_inv_Y"], [43, 4, 1, "", "L"], [43, 4, 1, "", "M"], [43, 4, 1, "", "META"], [43, 4, 1, "", "N"], [43, 4, 1, "", "X"], [43, 4, 1, "", "Y"], [43, 3, 1, "", "__init__"], [43, 3, 1, "", "broadcast_parameters"], [43, 4, 1, "", "fold"], [43, 4, 1, "", "implementation"], [43, 3, 1, "", "predict"], [43, 3, 1, "", "test"]], "romcomma.gpr.models.GPR.Data": [[43, 2, 1, "", "NamedTuple"], [43, 3, 1, "", "copy"], [43, 3, 1, "", "delete"], [43, 3, 1, "", "empty"], [43, 3, 1, "", "move"], [43, 3, 1, "", "read"]], "romcomma.gpr.models.Likelihood": [[44, 1, 1, "", "Data"], [44, 4, 1, "", "META"], [44, 3, 1, "", "__init__"], [44, 3, 1, "", "calibrate"]], "romcomma.gpr.models.Likelihood.Data": [[44, 2, 1, "", "NamedTuple"], [44, 3, 1, "", "copy"], [44, 3, 1, "", "delete"], [44, 3, 1, "", "empty"], [44, 3, 1, "", "move"], [44, 3, 1, "", "read"]], "romcomma.gpr.models.MOGP": [[45, 1, 1, "", "Data"], [45, 2, 1, "", "KERNEL_FOLDER_NAME"], [45, 4, 1, "", "K_cho"], [45, 4, 1, "", "K_inv_Y"], [45, 4, 1, "", "L"], [45, 4, 1, "", "M"], [45, 4, 1, "", "META"], [45, 4, 1, "", "N"], [45, 4, 1, "", "X"], [45, 4, 1, "", "Y"], [45, 3, 1, "", "__init__"], [45, 3, 1, "", "broadcast_parameters"], [45, 3, 1, "", "calibrate"], [45, 3, 1, "", "check_K_inv_Y"], [45, 4, 1, "", "fold"], [45, 4, 1, "", "implementation"], [45, 3, 1, "", "predict"], [45, 3, 1, "", "test"]], "romcomma.gpr.models.MOGP.Data": [[45, 2, 1, "", "NamedTuple"], [45, 3, 1, "", "copy"], [45, 3, 1, "", "delete"], [45, 3, 1, "", "empty"], [45, 3, 1, "", "move"], [45, 3, 1, "", "read"]], "romcomma.gsa": [[47, 0, 0, "-", "base"], [56, 0, 0, "-", "calibrators"], [60, 0, 0, "-", "models"]], "romcomma.gsa.base": [[48, 1, 1, "", "Calibrator"], [49, 1, 1, "", "Gaussian"], [50, 6, 1, "", "diag_det"], [51, 6, 1, "", "mean"], [52, 6, 1, "", "ms"], [53, 6, 1, "", "rms"], [54, 6, 1, "", "sos"], [55, 6, 1, "", "sym_check"]], "romcomma.gsa.base.Calibrator": [[48, 3, 1, "", "__init__"]], "romcomma.gsa.base.Gaussian": [[49, 3, 1, "", "__init__"], [49, 2, 1, "", "cho_diag"], [49, 4, 1, "", "det"], [49, 3, 1, "", "expand_dims"], [49, 2, 1, "", "exponent"], [49, 4, 1, "", "pdf"]], "romcomma.gsa.calibrators": [[57, 1, 1, "", "ClosedSobol"], [58, 1, 1, "", "ClosedSobolWithError"], [59, 1, 1, "", "ClosedSobolWithRotation"]], "romcomma.gsa.calibrators.ClosedSobol": [[57, 4, 1, "", "META"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "marginalize"], [57, 4, 1, "", "name"], [57, 4, 1, "", "name_scope"], [57, 4, 1, "", "non_trainable_variables"], [57, 4, 1, "", "submodules"], [57, 4, 1, "", "trainable_variables"], [57, 4, 1, "", "variables"], [57, 3, 1, "", "with_name_scope"]], "romcomma.gsa.calibrators.ClosedSobolWithError": [[58, 4, 1, "", "META"], [58, 1, 1, "", "RankEquation"], [58, 1, 1, "", "RankEquations"], [58, 3, 1, "", "__init__"], [58, 3, 1, "", "marginalize"], [58, 4, 1, "", "name"], [58, 4, 1, "", "name_scope"], [58, 4, 1, "", "non_trainable_variables"], [58, 4, 1, "", "submodules"], [58, 4, 1, "", "trainable_variables"], [58, 4, 1, "", "variables"], [58, 3, 1, "", "with_name_scope"]], "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation": [[58, 3, 1, "", "count"], [58, 2, 1, "", "i"], [58, 3, 1, "", "index"], [58, 2, 1, "", "j"], [58, 2, 1, "", "k"], [58, 2, 1, "", "l"]], "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations": [[58, 2, 1, "", "DIAGONAL"], [58, 2, 1, "", "MIXED"], [58, 3, 1, "", "count"], [58, 3, 1, "", "index"]], "romcomma.gsa.calibrators.ClosedSobolWithRotation": [[59, 2, 1, "", "META"], [59, 3, 1, "", "__init__"], [59, 3, 1, "", "marginalize"], [59, 4, 1, "", "name"], [59, 4, 1, "", "name_scope"], [59, 4, 1, "", "non_trainable_variables"], [59, 4, 1, "", "submodules"], [59, 4, 1, "", "trainable_variables"], [59, 4, 1, "", "variables"], [59, 3, 1, "", "with_name_scope"]], "romcomma.gsa.models": [[61, 1, 1, "", "GSA"], [62, 1, 1, "", "Sobol"]], "romcomma.gsa.models.GSA": [[61, 1, 1, "", "Data"], [61, 1, 1, "", "Kind"], [61, 2, 1, "", "META"], [61, 3, 1, "", "__init__"], [61, 3, 1, "", "calibrate"], [61, 4, 1, "", "calibrator"]], "romcomma.gsa.models.GSA.Data": [[61, 1, 1, "", "NamedTuple"], [61, 3, 1, "", "copy"], [61, 3, 1, "", "delete"], [61, 3, 1, "", "empty"], [61, 3, 1, "", "move"], [61, 3, 1, "", "read"]], "romcomma.gsa.models.GSA.Data.NamedTuple": [[61, 2, 1, "", "NotImplemented"], [61, 3, 1, "", "count"], [61, 3, 1, "", "index"]], "romcomma.gsa.models.Sobol": [[62, 1, 1, "", "Data"], [62, 1, 1, "", "Kind"], [62, 4, 1, "", "META"], [62, 3, 1, "", "__init__"], [62, 3, 1, "", "calibrate"], [62, 4, 1, "", "calibrator"]], "romcomma.gsa.models.Sobol.Data": [[62, 2, 1, "", "NamedTuple"], [62, 3, 1, "", "copy"], [62, 3, 1, "", "delete"], [62, 3, 1, "", "empty"], [62, 3, 1, "", "move"], [62, 3, 1, "", "read"]], "romcomma.rom": [[64, 0, 0, "-", "old"]], "romcomma.run": [[66, 0, 0, "-", "context"], [69, 0, 0, "-", "function"], [77, 0, 0, "-", "results"], [80, 0, 0, "-", "sample"], [84, 0, 0, "-", "summarised"]], "romcomma.run.context": [[67, 6, 1, "", "Environment"], [68, 6, 1, "", "Timer"]], "romcomma.run.function": [[70, 5, 1, "", "ALL"], [71, 5, 1, "", "ISHIGAMI"], [72, 5, 1, "", "OAKLEY2004"], [73, 5, 1, "", "SOBOL_G"], [74, 1, 1, "", "Scalar"], [75, 1, 1, "", "Vector"], [76, 6, 1, "", "linspace"]], "romcomma.run.function.Scalar": [[74, 3, 1, "", "__init__"]], "romcomma.run.function.Vector": [[75, 3, 1, "", "__init__"], [75, 3, 1, "", "clear"], [75, 3, 1, "", "concat"], [75, 3, 1, "", "copy"], [75, 3, 1, "", "fromkeys"], [75, 3, 1, "", "get"], [75, 3, 1, "", "items"], [75, 3, 1, "", "keys"], [75, 4, 1, "", "meta"], [75, 3, 1, "", "pop"], [75, 3, 1, "", "popitem"], [75, 3, 1, "", "setdefault"], [75, 3, 1, "", "subVector"], [75, 3, 1, "", "update"], [75, 3, 1, "", "values"]], "romcomma.run.results": [[78, 1, 1, "", "Collect"], [79, 6, 1, "", "copy"]], "romcomma.run.results.Collect": [[78, 3, 1, "", "__init__"], [78, 2, 1, "", "csvs"], [78, 2, 1, "", "folders"], [78, 3, 1, "", "from_folders"], [78, 3, 1, "", "from_folds"], [78, 2, 1, "", "ignore_missing"], [78, 2, 1, "", "write_options"]], "romcomma.run.sample": [[81, 1, 1, "", "DOE"], [82, 1, 1, "", "Function"], [83, 1, 1, "", "GaussianNoise"]], "romcomma.run.sample.DOE": [[81, 2, 1, "", "Method"], [81, 3, 1, "", "__init__"], [81, 3, 1, "", "full_factorial"], [81, 3, 1, "", "latin_hypercube"]], "romcomma.run.sample.Function": [[82, 3, 1, "", "__init__"], [82, 3, 1, "", "collection"], [82, 3, 1, "", "into_K_folds"], [82, 4, 1, "", "repo"], [82, 3, 1, "", "rotate_folds"], [82, 3, 1, "", "un_rotate_folds"]], "romcomma.run.sample.GaussianNoise": [[83, 1, 1, "", "Variance"], [83, 3, 1, "", "__init__"]], "romcomma.run.sample.GaussianNoise.Variance": [[83, 4, 1, "", "matrix"], [83, 4, 1, "", "meta"]], "romcomma.run.summarised": [[85, 6, 1, "", "gpr"], [86, 6, 1, "", "gsa"]], "romcomma.user": [[88, 0, 0, "-", "benchmark_gsa"], [90, 0, 0, "-", "gpr_from_function"], [106, 0, 0, "-", "gsa_from_function"], [123, 0, 0, "-", "repo_from_csv"], [131, 0, 0, "-", "repo_from_function"], [143, 0, 0, "-", "toy"]], "romcomma.user.benchmark_gsa": [[89, 5, 1, "", "BASE_FOLDER"]], "romcomma.user.gpr_from_function": [[91, 6, 1, "", "DOE"], [92, 5, 1, "", "FUNCTION_VECTOR"], [93, 5, 1, "", "IGNORE_EXCEPTIONS"], [94, 5, 1, "", "IS_COVARIANT"], [95, 5, 1, "", "IS_ISOTROPIC"], [96, 5, 1, "", "IS_NOISE_COVARIANT"], [97, 5, 1, "", "IS_NOISE_VARIANCE_RANDOM"], [98, 5, 1, "", "IS_READ"], [99, 5, 1, "", "K"], [100, 5, 1, "", "Ms"], [101, 5, 1, "", "NOISE_MAGNITUDES"], [102, 5, 1, "", "Ns"], [103, 5, 1, "", "READ"], [104, 5, 1, "", "ROOT"], [105, 5, 1, "", "ROTATIONS"]], "romcomma.user.gsa_from_function": [[107, 6, 1, "", "DOE"], [108, 5, 1, "", "FUNCTION_VECTOR"], [109, 5, 1, "", "IGNORE_EXCEPTIONS"], [110, 5, 1, "", "IS_COVARIANT"], [111, 5, 1, "", "IS_ISOTROPIC"], [112, 5, 1, "", "IS_NOISE_COVARIANT"], [113, 5, 1, "", "IS_NOISE_VARIANCE_RANDOM"], [114, 5, 1, "", "IS_READ"], [115, 5, 1, "", "K"], [116, 5, 1, "", "KINDS"], [117, 5, 1, "", "Ms"], [118, 5, 1, "", "NOISE_MAGNITUDES"], [119, 5, 1, "", "Ns"], [120, 5, 1, "", "READ"], [121, 5, 1, "", "ROOT"], [122, 5, 1, "", "ROTATIONS"]], "romcomma.user.repo_from_csv": [[124, 5, 1, "", "ADD_NOISE"], [125, 5, 1, "", "CSV"], [126, 5, 1, "", "IS_NOISE_COVARIANT"], [127, 5, 1, "", "IS_NOISE_VARIANCE_RANDOM"], [128, 5, 1, "", "K"], [129, 5, 1, "", "NOISE_MAGNITUDES"], [130, 5, 1, "", "ROOT"]], "romcomma.user.repo_from_function": [[132, 6, 1, "", "DOE"], [133, 5, 1, "", "FUNCTION_VECTOR"], [134, 5, 1, "", "IS_NOISE_COVARIANT"], [135, 5, 1, "", "IS_NOISE_VARIANCE_RANDOM"], [136, 5, 1, "", "K"], [137, 5, 1, "", "Ms"], [138, 5, 1, "", "NOISE_MAGNITUDES"], [139, 5, 1, "", "Ns"], [140, 5, 1, "", "READ"], [141, 5, 1, "", "ROOT"], [142, 5, 1, "", "ROTATIONS"]], "romcomma.user.toy": [[144, 5, 1, "", "ROOT"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"]}, "titleterms": {"rom": [1, 63, 64], "comma": 1, "user": [1, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "guid": 1, "content": 1, "indic": 1, "tabl": 1, "packag": [], "refer": 2, "romcomma": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 47, 48, 49, 50, 51, 52, 53, 54, 55], "class": [4, 5, 6, 7], "model": [7, 30, 31, 42, 43, 44, 45, 60, 61, 62], "paramet": [], "definit": [8, 9, 10, 11, 12, 13], "float": 10, "int": 11, "np": 12, "tf": 13, "data": [5, 14, 15, 16, 17, 18, 19], "storag": [15, 16, 17, 18, 19], "fold": 16, "frame": [6, 17], "normal": 18, "repositori": 19, "gpf": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "varianc": 22, "kernel": [23, 24, 25, 35, 39, 40, 41], "mostationari": 24, "rbf": [25, 41], "likelihood": [26, 27, 36, 44], "mogaussian": 27, "mean_funct": [28, 29], "momeanfunct": 29, "mogpr": 31, "test": [32, 33, 34, 35, 36, 37], "covari": 33, "increment": 34, "regression_data": 37, "gpr": [38, 39, 40, 41, 42, 43, 44, 45, 85], "gp": [], "gpinterfac": [], "gsa": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 86], "sobol": 62, "closedindex": [], "closedindexwitherror": [], "closedindexwithrot": [], "gaussian": 49, "det": [], "mean": 51, "m": [52, 100, 117, 137], "rm": 53, "so": 54, "sym_check": 55, "undertak": [], "old": 64, "context": [66, 67, 68], "setup": [], "timer": 68, "function": [69, 70, 71, 72, 73, 74, 75, 76, 82], "all": 70, "ishigami": 71, "oakley2004": 72, "sobol_g": 73, "scalar": 74, "vector": 75, "linspac": 76, "result": [77, 78, 79], "collect": 78, "copi": 79, "run": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "sampl": [80, 81, 82, 83], "doe": [81, 91, 107, 132], "gaussiannois": 83, "script": [], "base_fold": 89, "get": 145, "start": 145, "instal": 145, "structur": [], "glossari": [0, 145], "abbrevi": [], "modul": [2, 145], "hierarchi": 145, "mogp": 45, "calcul": [], "gaussianwithout2pi": [], "closedsobol": 57, "closedsobolwitherror": 58, "closedsobolwithrot": 59, "benchmark_gsa": [88, 89], "gpr_from_funct": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "function_vector": [92, 108, 133], "ignore_except": [93, 109], "is_covari": [94, 110], "is_isotrop": [95, 111], "is_noise_covari": [96, 112, 126, 134], "is_noise_variance_random": [97, 113, 127, 135], "is_read": [98, 114], "k": [99, 115, 128, 136], "noise_magnitud": [101, 118, 129, 138], "n": [102, 119, 139], "read": [103, 120, 140], "root": [104, 121, 130, 141, 144], "rotat": [105, 122, 142], "gsa_from_funct": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "kind": 116, "repo_from_csv": [123, 124, 125, 126, 127, 128, 129, 130], "add_nois": 124, "csv": 125, "repo_from_funct": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "summaris": [84, 85, 86], "conceptu": 145, "toi": [143, 144], "effectively_zero": 9, "environ": 67, "calibr": [48, 56, 57, 58, 59], "log_pdf": [], "pdf": [], "diag_det": 50}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Glossary": [[0, "glossary"], [145, "glossary"]], "rom-comma User Guide": [[1, "rom-comma-user-guide"]], "Contents": [[1, "contents"]], "Indices and Tables": [[1, "indices-and-tables"]], "Module Reference": [[2, "module-romcomma"]], "romcomma.base": [[3, "module-romcomma.base"]], "romcomma.base.classes": [[4, "module-romcomma.base.classes"]], "romcomma.base.classes.Data": [[5, "romcomma-base-classes-data"]], "romcomma.base.classes.Frame": [[6, "romcomma-base-classes-frame"]], "romcomma.base.classes.Model": [[7, "romcomma-base-classes-model"]], "romcomma.base.definitions": [[8, "module-romcomma.base.definitions"]], "romcomma.base.definitions.EFFECTIVELY_ZERO": [[9, "romcomma-base-definitions-effectively-zero"]], "romcomma.base.definitions.FLOAT": [[10, "romcomma-base-definitions-float"]], "romcomma.base.definitions.INT": [[11, "romcomma-base-definitions-int"]], "romcomma.base.definitions.NP": [[12, "romcomma-base-definitions-np"]], "romcomma.base.definitions.TF": [[13, "romcomma-base-definitions-tf"]], "romcomma.data": [[14, "module-romcomma.data"]], "romcomma.data.storage": [[15, "module-romcomma.data.storage"]], "romcomma.data.storage.Fold": [[16, "romcomma-data-storage-fold"]], "romcomma.data.storage.Frame": [[17, "romcomma-data-storage-frame"]], "romcomma.data.storage.Normalization": [[18, "romcomma-data-storage-normalization"]], "romcomma.data.storage.Repository": [[19, "romcomma-data-storage-repository"]], "romcomma.gpf": [[20, "module-romcomma.gpf"]], "romcomma.gpf.base": [[21, "module-romcomma.gpf.base"]], "romcomma.gpf.base.Variance": [[22, "romcomma-gpf-base-variance"]], "romcomma.gpf.kernels": [[23, "module-romcomma.gpf.kernels"]], "romcomma.gpf.kernels.MOStationary": [[24, "romcomma-gpf-kernels-mostationary"]], "romcomma.gpf.kernels.RBF": [[25, "romcomma-gpf-kernels-rbf"]], "romcomma.gpf.likelihoods": [[26, "module-romcomma.gpf.likelihoods"]], "romcomma.gpf.likelihoods.MOGaussian": [[27, "romcomma-gpf-likelihoods-mogaussian"]], "romcomma.gpf.mean_functions": [[28, "module-romcomma.gpf.mean_functions"]], "romcomma.gpf.mean_functions.MOMeanFunction": [[29, "romcomma-gpf-mean-functions-momeanfunction"]], "romcomma.gpf.models": [[30, "module-romcomma.gpf.models"]], "romcomma.gpf.models.MOGPR": [[31, "romcomma-gpf-models-mogpr"]], "romcomma.gpf.tests": [[32, "module-romcomma.gpf.tests"]], "romcomma.gpf.tests.covariance": [[33, "romcomma-gpf-tests-covariance"]], "romcomma.gpf.tests.increment": [[34, "romcomma-gpf-tests-increment"]], "romcomma.gpf.tests.kernel": [[35, "romcomma-gpf-tests-kernel"]], "romcomma.gpf.tests.likelihood": [[36, "romcomma-gpf-tests-likelihood"]], "romcomma.gpf.tests.regression_data": [[37, "romcomma-gpf-tests-regression-data"]], "romcomma.gpr": [[38, "module-romcomma.gpr"]], "romcomma.gpr.kernels": [[39, "module-romcomma.gpr.kernels"]], "romcomma.gpr.kernels.Kernel": [[40, "romcomma-gpr-kernels-kernel"]], "romcomma.gpr.kernels.RBF": [[41, "romcomma-gpr-kernels-rbf"]], "romcomma.gpr.models": [[42, "module-romcomma.gpr.models"]], "romcomma.gpr.models.GPR": [[43, "romcomma-gpr-models-gpr"]], "romcomma.gpr.models.Likelihood": [[44, "romcomma-gpr-models-likelihood"]], "romcomma.gpr.models.MOGP": [[45, "romcomma-gpr-models-mogp"]], "romcomma.gsa": [[46, "module-romcomma.gsa"]], "romcomma.gsa.base": [[47, "module-romcomma.gsa.base"]], "romcomma.gsa.base.Calibrator": [[48, "romcomma-gsa-base-calibrator"]], "romcomma.gsa.base.Gaussian": [[49, "romcomma-gsa-base-gaussian"]], "romcomma.gsa.base.diag_det": [[50, "romcomma-gsa-base-diag-det"]], "romcomma.gsa.base.mean": [[51, "romcomma-gsa-base-mean"]], "romcomma.gsa.base.ms": [[52, "romcomma-gsa-base-ms"]], "romcomma.gsa.base.rms": [[53, "romcomma-gsa-base-rms"]], "romcomma.gsa.base.sos": [[54, "romcomma-gsa-base-sos"]], "romcomma.gsa.base.sym_check": [[55, "romcomma-gsa-base-sym-check"]], "romcomma.gsa.calibrators": [[56, "module-romcomma.gsa.calibrators"]], "romcomma.gsa.calibrators.ClosedSobol": [[57, "romcomma-gsa-calibrators-closedsobol"]], "romcomma.gsa.calibrators.ClosedSobolWithError": [[58, "romcomma-gsa-calibrators-closedsobolwitherror"]], "romcomma.gsa.calibrators.ClosedSobolWithRotation": [[59, "romcomma-gsa-calibrators-closedsobolwithrotation"]], "romcomma.gsa.models": [[60, "module-romcomma.gsa.models"]], "romcomma.gsa.models.GSA": [[61, "romcomma-gsa-models-gsa"]], "romcomma.gsa.models.Sobol": [[62, "romcomma-gsa-models-sobol"]], "romcomma.rom": [[63, "module-romcomma.rom"]], "romcomma.rom.old": [[64, "module-romcomma.rom.old"]], "romcomma.run": [[65, "module-romcomma.run"]], "romcomma.run.context": [[66, "module-romcomma.run.context"]], "romcomma.run.context.Environment": [[67, "romcomma-run-context-environment"]], "romcomma.run.context.Timer": [[68, "romcomma-run-context-timer"]], "romcomma.run.function": [[69, "module-romcomma.run.function"]], "romcomma.run.function.ALL": [[70, "romcomma-run-function-all"]], "romcomma.run.function.ISHIGAMI": [[71, "romcomma-run-function-ishigami"]], "romcomma.run.function.OAKLEY2004": [[72, "romcomma-run-function-oakley2004"]], "romcomma.run.function.SOBOL_G": [[73, "romcomma-run-function-sobol-g"]], "romcomma.run.function.Scalar": [[74, "romcomma-run-function-scalar"]], "romcomma.run.function.Vector": [[75, "romcomma-run-function-vector"]], "romcomma.run.function.linspace": [[76, "romcomma-run-function-linspace"]], "romcomma.run.results": [[77, "module-romcomma.run.results"]], "romcomma.run.results.Collect": [[78, "romcomma-run-results-collect"]], "romcomma.run.results.copy": [[79, "romcomma-run-results-copy"]], "romcomma.run.sample": [[80, "module-romcomma.run.sample"]], "romcomma.run.sample.DOE": [[81, "romcomma-run-sample-doe"]], "romcomma.run.sample.Function": [[82, "romcomma-run-sample-function"]], "romcomma.run.sample.GaussianNoise": [[83, "romcomma-run-sample-gaussiannoise"]], "romcomma.run.summarised": [[84, "module-romcomma.run.summarised"]], "romcomma.run.summarised.gpr": [[85, "romcomma-run-summarised-gpr"]], "romcomma.run.summarised.gsa": [[86, "romcomma-run-summarised-gsa"]], "romcomma.user": [[87, "module-romcomma.user"]], "romcomma.user.benchmark_gsa": [[88, "module-romcomma.user.benchmark_gsa"]], "romcomma.user.benchmark_gsa.BASE_FOLDER": [[89, "romcomma-user-benchmark-gsa-base-folder"]], "romcomma.user.gpr_from_function": [[90, "module-romcomma.user.gpr_from_function"]], "romcomma.user.gpr_from_function.DOE": [[91, "romcomma-user-gpr-from-function-doe"]], "romcomma.user.gpr_from_function.FUNCTION_VECTOR": [[92, "romcomma-user-gpr-from-function-function-vector"]], "romcomma.user.gpr_from_function.IGNORE_EXCEPTIONS": [[93, "romcomma-user-gpr-from-function-ignore-exceptions"]], "romcomma.user.gpr_from_function.IS_COVARIANT": [[94, "romcomma-user-gpr-from-function-is-covariant"]], "romcomma.user.gpr_from_function.IS_ISOTROPIC": [[95, "romcomma-user-gpr-from-function-is-isotropic"]], "romcomma.user.gpr_from_function.IS_NOISE_COVARIANT": [[96, "romcomma-user-gpr-from-function-is-noise-covariant"]], "romcomma.user.gpr_from_function.IS_NOISE_VARIANCE_RANDOM": [[97, "romcomma-user-gpr-from-function-is-noise-variance-random"]], "romcomma.user.gpr_from_function.IS_READ": [[98, "romcomma-user-gpr-from-function-is-read"]], "romcomma.user.gpr_from_function.K": [[99, "romcomma-user-gpr-from-function-k"]], "romcomma.user.gpr_from_function.Ms": [[100, "romcomma-user-gpr-from-function-ms"]], "romcomma.user.gpr_from_function.NOISE_MAGNITUDES": [[101, "romcomma-user-gpr-from-function-noise-magnitudes"]], "romcomma.user.gpr_from_function.Ns": [[102, "romcomma-user-gpr-from-function-ns"]], "romcomma.user.gpr_from_function.READ": [[103, "romcomma-user-gpr-from-function-read"]], "romcomma.user.gpr_from_function.ROOT": [[104, "romcomma-user-gpr-from-function-root"]], "romcomma.user.gpr_from_function.ROTATIONS": [[105, "romcomma-user-gpr-from-function-rotations"]], "romcomma.user.gsa_from_function": [[106, "module-romcomma.user.gsa_from_function"]], "romcomma.user.gsa_from_function.DOE": [[107, "romcomma-user-gsa-from-function-doe"]], "romcomma.user.gsa_from_function.FUNCTION_VECTOR": [[108, "romcomma-user-gsa-from-function-function-vector"]], "romcomma.user.gsa_from_function.IGNORE_EXCEPTIONS": [[109, "romcomma-user-gsa-from-function-ignore-exceptions"]], "romcomma.user.gsa_from_function.IS_COVARIANT": [[110, "romcomma-user-gsa-from-function-is-covariant"]], "romcomma.user.gsa_from_function.IS_ISOTROPIC": [[111, "romcomma-user-gsa-from-function-is-isotropic"]], "romcomma.user.gsa_from_function.IS_NOISE_COVARIANT": [[112, "romcomma-user-gsa-from-function-is-noise-covariant"]], "romcomma.user.gsa_from_function.IS_NOISE_VARIANCE_RANDOM": [[113, "romcomma-user-gsa-from-function-is-noise-variance-random"]], "romcomma.user.gsa_from_function.IS_READ": [[114, "romcomma-user-gsa-from-function-is-read"]], "romcomma.user.gsa_from_function.K": [[115, "romcomma-user-gsa-from-function-k"]], "romcomma.user.gsa_from_function.KINDS": [[116, "romcomma-user-gsa-from-function-kinds"]], "romcomma.user.gsa_from_function.Ms": [[117, "romcomma-user-gsa-from-function-ms"]], "romcomma.user.gsa_from_function.NOISE_MAGNITUDES": [[118, "romcomma-user-gsa-from-function-noise-magnitudes"]], "romcomma.user.gsa_from_function.Ns": [[119, "romcomma-user-gsa-from-function-ns"]], "romcomma.user.gsa_from_function.READ": [[120, "romcomma-user-gsa-from-function-read"]], "romcomma.user.gsa_from_function.ROOT": [[121, "romcomma-user-gsa-from-function-root"]], "romcomma.user.gsa_from_function.ROTATIONS": [[122, "romcomma-user-gsa-from-function-rotations"]], "romcomma.user.repo_from_csv": [[123, "module-romcomma.user.repo_from_csv"]], "romcomma.user.repo_from_csv.ADD_NOISE": [[124, "romcomma-user-repo-from-csv-add-noise"]], "romcomma.user.repo_from_csv.CSV": [[125, "romcomma-user-repo-from-csv-csv"]], "romcomma.user.repo_from_csv.IS_NOISE_COVARIANT": [[126, "romcomma-user-repo-from-csv-is-noise-covariant"]], "romcomma.user.repo_from_csv.IS_NOISE_VARIANCE_RANDOM": [[127, "romcomma-user-repo-from-csv-is-noise-variance-random"]], "romcomma.user.repo_from_csv.K": [[128, "romcomma-user-repo-from-csv-k"]], "romcomma.user.repo_from_csv.NOISE_MAGNITUDES": [[129, "romcomma-user-repo-from-csv-noise-magnitudes"]], "romcomma.user.repo_from_csv.ROOT": [[130, "romcomma-user-repo-from-csv-root"]], "romcomma.user.repo_from_function": [[131, "module-romcomma.user.repo_from_function"]], "romcomma.user.repo_from_function.DOE": [[132, "romcomma-user-repo-from-function-doe"]], "romcomma.user.repo_from_function.FUNCTION_VECTOR": [[133, "romcomma-user-repo-from-function-function-vector"]], "romcomma.user.repo_from_function.IS_NOISE_COVARIANT": [[134, "romcomma-user-repo-from-function-is-noise-covariant"]], "romcomma.user.repo_from_function.IS_NOISE_VARIANCE_RANDOM": [[135, "romcomma-user-repo-from-function-is-noise-variance-random"]], "romcomma.user.repo_from_function.K": [[136, "romcomma-user-repo-from-function-k"]], "romcomma.user.repo_from_function.Ms": [[137, "romcomma-user-repo-from-function-ms"]], "romcomma.user.repo_from_function.NOISE_MAGNITUDES": [[138, "romcomma-user-repo-from-function-noise-magnitudes"]], "romcomma.user.repo_from_function.Ns": [[139, "romcomma-user-repo-from-function-ns"]], "romcomma.user.repo_from_function.READ": [[140, "romcomma-user-repo-from-function-read"]], "romcomma.user.repo_from_function.ROOT": [[141, "romcomma-user-repo-from-function-root"]], "romcomma.user.repo_from_function.ROTATIONS": [[142, "romcomma-user-repo-from-function-rotations"]], "romcomma.user.toy": [[143, "module-romcomma.user.toy"]], "romcomma.user.toy.ROOT": [[144, "romcomma-user-toy-root"]], "Getting Started": [[145, "getting-started"]], "Installation": [[145, "installation"]], "Conceptual Hierarchy": [[145, "conceptual-hierarchy"]], "Module Hierarchy": [[145, "module-hierarchy"]]}, "indexentries": {"gpr": [[0, "term-GPR"], [145, "term-GPR"]], "gsa": [[0, "term-GSA"], [145, "term-GSA"]], "rom": [[0, "term-ROM"], [145, "term-ROM"]], "stddev": [[0, "term-StdDev"], [2, "term-StdDev"]], "folder": [[0, "term-folder"], [2, "term-folder"]], "gf": [[0, "term-gf"], [2, "term-gf"]], "module": [[0, "term-module"], [2, "module-romcomma"], [3, "module-romcomma.base"], [4, "module-romcomma.base.classes"], [8, "module-romcomma.base.definitions"], [14, "module-romcomma.data"], [15, "module-romcomma.data.storage"], [20, "module-romcomma.gpf"], [21, "module-romcomma.gpf.base"], [23, "module-romcomma.gpf.kernels"], [26, "module-romcomma.gpf.likelihoods"], [28, "module-romcomma.gpf.mean_functions"], [30, "module-romcomma.gpf.models"], [32, "module-romcomma.gpf.tests"], [38, "module-romcomma.gpr"], [39, "module-romcomma.gpr.kernels"], [42, "module-romcomma.gpr.models"], [46, "module-romcomma.gsa"], [47, "module-romcomma.gsa.base"], [56, "module-romcomma.gsa.calibrators"], [60, "module-romcomma.gsa.models"], [63, "module-romcomma.rom"], [64, "module-romcomma.rom.old"], [65, "module-romcomma.run"], [66, "module-romcomma.run.context"], [69, "module-romcomma.run.function"], [77, "module-romcomma.run.results"], [80, "module-romcomma.run.sample"], [84, "module-romcomma.run.summarised"], [87, "module-romcomma.user"], [88, "module-romcomma.user.benchmark_gsa"], [90, "module-romcomma.user.gpr_from_function"], [106, "module-romcomma.user.gsa_from_function"], [123, "module-romcomma.user.repo_from_csv"], [131, "module-romcomma.user.repo_from_function"], [143, "module-romcomma.user.toy"], [145, "term-module"]], "np": [[0, "term-np"], [2, "term-np"]], "package": [[0, "term-package"], [145, "term-package"]], "pd": [[0, "term-pd"], [2, "term-pd"]], "tf": [[0, "term-tf"], [2, "term-tf"]], "romcomma": [[2, "module-romcomma"]], "romcomma.base": [[3, "module-romcomma.base"]], "romcomma.base.classes": [[4, "module-romcomma.base.classes"]], "data (class in romcomma.base.classes)": [[5, "romcomma.base.classes.Data"]], "data.namedtuple (class in romcomma.base.classes)": [[5, "romcomma.base.classes.Data.NamedTuple"]], "notimplemented (data.namedtuple attribute)": [[5, "romcomma.base.classes.Data.NamedTuple.NotImplemented"]], "__init__() (data method)": [[5, "romcomma.base.classes.Data.__init__"]], "copy() (data static method)": [[5, "romcomma.base.classes.Data.copy"]], "count() (data.namedtuple method)": [[5, "romcomma.base.classes.Data.NamedTuple.count"]], "delete() (data static method)": [[5, "romcomma.base.classes.Data.delete"]], "empty() (data static method)": [[5, "romcomma.base.classes.Data.empty"]], "index() (data.namedtuple method)": [[5, "romcomma.base.classes.Data.NamedTuple.index"]], "move() (data method)": [[5, "romcomma.base.classes.Data.move"]], "read() (data class method)": [[5, "romcomma.base.classes.Data.read"]], "frame (class in romcomma.base.classes)": [[6, "romcomma.base.classes.Frame"]], "__init__() (frame method)": [[6, "romcomma.base.classes.Frame.__init__"], [17, "romcomma.data.storage.Frame.__init__"]], "broadcast_value() (frame method)": [[6, "romcomma.base.classes.Frame.broadcast_value"]], "csv (frame attribute)": [[6, "romcomma.base.classes.Frame.csv"]], "write() (frame method)": [[6, "romcomma.base.classes.Frame.write"], [17, "romcomma.data.storage.Frame.write"]], "meta (model property)": [[7, "romcomma.base.classes.Model.META"]], "model (class in romcomma.base.classes)": [[7, "romcomma.base.classes.Model"]], "model.data (class in romcomma.base.classes)": [[7, "romcomma.base.classes.Model.Data"]], "model.data.namedtuple (class in romcomma.base.classes)": [[7, "romcomma.base.classes.Model.Data.NamedTuple"]], "notimplemented (model.data.namedtuple attribute)": [[7, "romcomma.base.classes.Model.Data.NamedTuple.NotImplemented"]], "__init__() (model method)": [[7, "romcomma.base.classes.Model.__init__"]], "copy() (model.data static method)": [[7, "romcomma.base.classes.Model.Data.copy"]], "count() (model.data.namedtuple method)": [[7, "romcomma.base.classes.Model.Data.NamedTuple.count"]], "delete() (model.data static method)": [[7, "romcomma.base.classes.Model.Data.delete"]], "empty() (model.data static method)": [[7, "romcomma.base.classes.Model.Data.empty"]], "index() (model.data.namedtuple method)": [[7, "romcomma.base.classes.Model.Data.NamedTuple.index"]], "move() (model.data method)": [[7, "romcomma.base.classes.Model.Data.move"]], "read() (model.data class method)": [[7, "romcomma.base.classes.Model.Data.read"]], "romcomma.base.definitions": [[8, "module-romcomma.base.definitions"]], "effectively_zero (in module romcomma.base.definitions)": [[9, "romcomma.base.definitions.EFFECTIVELY_ZERO"]], "float() (in module romcomma.base.definitions)": [[10, "romcomma.base.definitions.FLOAT"]], "int() (in module romcomma.base.definitions)": [[11, "romcomma.base.definitions.INT"]], "array (np attribute)": [[12, "romcomma.base.definitions.NP.Array"]], "covector (np attribute)": [[12, "romcomma.base.definitions.NP.Covector"]], "matrix (np attribute)": [[12, "romcomma.base.definitions.NP.Matrix"]], "np (class in romcomma.base.definitions)": [[12, "romcomma.base.definitions.NP"]], "tensor (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor"]], "tensor1 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor1"]], "tensor2 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor2"]], "tensor3 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor3"]], "tensor4 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor4"]], "tensor5 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor5"]], "tensor6 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor6"]], "tensor7 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor7"]], "tensor8 (np attribute)": [[12, "romcomma.base.definitions.NP.Tensor8"]], "vector (np attribute)": [[12, "romcomma.base.definitions.NP.Vector"]], "__init__() (np method)": [[12, "romcomma.base.definitions.NP.__init__"]], "array (tf attribute)": [[13, "romcomma.base.definitions.TF.Array"]], "covector (tf attribute)": [[13, "romcomma.base.definitions.TF.Covector"]], "matrix (tf attribute)": [[13, "romcomma.base.definitions.TF.Matrix"]], "nan (tf attribute)": [[13, "romcomma.base.definitions.TF.NaN"]], "pairofints (tf attribute)": [[13, "romcomma.base.definitions.TF.PairOfInts"]], "slice (tf attribute)": [[13, "romcomma.base.definitions.TF.Slice"]], "tf (class in romcomma.base.definitions)": [[13, "romcomma.base.definitions.TF"]], "tf.tensor (class in romcomma.base.definitions)": [[13, "romcomma.base.definitions.TF.Tensor"]], "tensor1 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor1"]], "tensor2 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor2"]], "tensor3 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor3"]], "tensor4 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor4"]], "tensor5 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor5"]], "tensor6 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor6"]], "tensor7 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor7"]], "tensor8 (tf attribute)": [[13, "romcomma.base.definitions.TF.Tensor8"]], "vector (tf attribute)": [[13, "romcomma.base.definitions.TF.Vector"]], "__init__() (tf method)": [[13, "romcomma.base.definitions.TF.__init__"]], "consumers() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.consumers"]], "device (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.device"]], "dtype (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.dtype"]], "eval() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.eval"]], "experimental_ref() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.experimental_ref"]], "get_shape() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.get_shape"]], "graph (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.graph"]], "name (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.name"]], "op (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.op"]], "ref() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.ref"]], "set_shape() (tf.tensor method)": [[13, "romcomma.base.definitions.TF.Tensor.set_shape"]], "shape (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.shape"]], "value_index (tf.tensor property)": [[13, "romcomma.base.definitions.TF.Tensor.value_index"]], "romcomma.data": [[14, "module-romcomma.data"]], "romcomma.data.storage": [[15, "module-romcomma.data.storage"]], "fold (class in romcomma.data.storage)": [[16, "romcomma.data.storage.Fold"]], "k (fold property)": [[16, "romcomma.data.storage.Fold.K"]], "l (fold property)": [[16, "romcomma.data.storage.Fold.L"]], "m (fold property)": [[16, "romcomma.data.storage.Fold.M"]], "n (fold property)": [[16, "romcomma.data.storage.Fold.N"]], "x (fold property)": [[16, "romcomma.data.storage.Fold.X"]], "x_rotation (fold property)": [[16, "romcomma.data.storage.Fold.X_rotation"]], "y (fold property)": [[16, "romcomma.data.storage.Fold.Y"]], "y_split() (fold method)": [[16, "romcomma.data.storage.Fold.Y_split"]], "y_splits (fold property)": [[16, "romcomma.data.storage.Fold.Y_splits"]], "__init__() (fold method)": [[16, "romcomma.data.storage.Fold.__init__"]], "clean_copy() (fold method)": [[16, "romcomma.data.storage.Fold.clean_copy"]], "folds (fold property)": [[16, "romcomma.data.storage.Fold.folds"]], "from_csv() (fold class method)": [[16, "romcomma.data.storage.Fold.from_csv"]], "from_df() (fold class method)": [[16, "romcomma.data.storage.Fold.from_df"]], "from_dfs() (fold class method)": [[16, "romcomma.data.storage.Fold.from_dfs"]], "into_k_folds() (fold method)": [[16, "romcomma.data.storage.Fold.into_K_folds"]], "test_x (fold property)": [[16, "romcomma.data.storage.Fold.test_x"]], "test_y (fold property)": [[16, "romcomma.data.storage.Fold.test_y"]], "csv_options (frame property)": [[17, "romcomma.data.storage.Frame.CSV_OPTIONS"]], "frame (class in romcomma.data.storage)": [[17, "romcomma.data.storage.Frame"]], "is_empty (frame property)": [[17, "romcomma.data.storage.Frame.is_empty"]], "normalization (class in romcomma.data.storage)": [[18, "romcomma.data.storage.Normalization"]], "__init__() (normalization method)": [[18, "romcomma.data.storage.Normalization.__init__"]], "apply_to() (normalization method)": [[18, "romcomma.data.storage.Normalization.apply_to"]], "undo_from() (normalization method)": [[18, "romcomma.data.storage.Normalization.undo_from"]], "k (repository property)": [[19, "romcomma.data.storage.Repository.K"]], "l (repository property)": [[19, "romcomma.data.storage.Repository.L"]], "m (repository property)": [[19, "romcomma.data.storage.Repository.M"]], "n (repository property)": [[19, "romcomma.data.storage.Repository.N"]], "repository (class in romcomma.data.storage)": [[19, "romcomma.data.storage.Repository"]], "x (repository property)": [[19, "romcomma.data.storage.Repository.X"]], "y (repository property)": [[19, "romcomma.data.storage.Repository.Y"]], "y_split() (repository method)": [[19, "romcomma.data.storage.Repository.Y_split"]], "y_splits (repository property)": [[19, "romcomma.data.storage.Repository.Y_splits"]], "__init__() (repository method)": [[19, "romcomma.data.storage.Repository.__init__"]], "clean_copy() (repository method)": [[19, "romcomma.data.storage.Repository.clean_copy"]], "folds (repository property)": [[19, "romcomma.data.storage.Repository.folds"]], "from_csv() (repository class method)": [[19, "romcomma.data.storage.Repository.from_csv"]], "from_df() (repository class method)": [[19, "romcomma.data.storage.Repository.from_df"]], "into_k_folds() (repository method)": [[19, "romcomma.data.storage.Repository.into_K_folds"]], "romcomma.gpf": [[20, "module-romcomma.gpf"]], "romcomma.gpf.base": [[21, "module-romcomma.gpf.base"]], "variance (class in romcomma.gpf.base)": [[22, "romcomma.gpf.base.Variance"]], "__init__() (variance method)": [[22, "romcomma.gpf.base.Variance.__init__"]], "cholesky (variance property)": [[22, "romcomma.gpf.base.Variance.cholesky"]], "name (variance property)": [[22, "romcomma.gpf.base.Variance.name"]], "name_scope (variance property)": [[22, "romcomma.gpf.base.Variance.name_scope"]], "non_trainable_variables (variance property)": [[22, "romcomma.gpf.base.Variance.non_trainable_variables"]], "shape (variance property)": [[22, "romcomma.gpf.base.Variance.shape"]], "submodules (variance property)": [[22, "romcomma.gpf.base.Variance.submodules"]], "trainable_variables (variance property)": [[22, "romcomma.gpf.base.Variance.trainable_variables"]], "value (variance property)": [[22, "romcomma.gpf.base.Variance.value"]], "value_times_eye() (variance method)": [[22, "romcomma.gpf.base.Variance.value_times_eye"]], "value_to_broadcast (variance property)": [[22, "romcomma.gpf.base.Variance.value_to_broadcast"]], "variables (variance property)": [[22, "romcomma.gpf.base.Variance.variables"]], "with_name_scope() (variance class method)": [[22, "romcomma.gpf.base.Variance.with_name_scope"]], "romcomma.gpf.kernels": [[23, "module-romcomma.gpf.kernels"]], "k_d() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.K_d"]], "k_d_apply_variance() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.K_d_apply_variance"]], "k_d_unit_variance() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.K_d_unit_variance"]], "k_diag() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.K_diag"]], "k_unit_variance() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.K_unit_variance"]], "mostationary (class in romcomma.gpf.kernels)": [[24, "romcomma.gpf.kernels.MOStationary"]], "__init__() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.__init__"]], "ard (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.ard"]], "lengthscales_neat (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.lengthscales_neat"]], "name (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.name"]], "name_scope (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.name_scope"]], "non_trainable_variables (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.non_trainable_variables"]], "on_separate_dims() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.on_separate_dims"]], "scaled_difference_matrix() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.scaled_difference_matrix"]], "slice() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.slice"]], "slice_cov() (mostationary method)": [[24, "romcomma.gpf.kernels.MOStationary.slice_cov"]], "submodules (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.submodules"]], "trainable_variables (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.trainable_variables"]], "variables (mostationary property)": [[24, "romcomma.gpf.kernels.MOStationary.variables"]], "with_name_scope() (mostationary class method)": [[24, "romcomma.gpf.kernels.MOStationary.with_name_scope"]], "k_d() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.K_d"]], "k_d_apply_variance() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.K_d_apply_variance"]], "k_d_unit_variance() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.K_d_unit_variance"]], "k_diag() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.K_diag"]], "k_unit_variance() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.K_unit_variance"]], "rbf (class in romcomma.gpf.kernels)": [[25, "romcomma.gpf.kernels.RBF"]], "__init__() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.__init__"], [41, "romcomma.gpr.kernels.RBF.__init__"]], "ard (rbf property)": [[25, "romcomma.gpf.kernels.RBF.ard"]], "lengthscales_neat (rbf property)": [[25, "romcomma.gpf.kernels.RBF.lengthscales_neat"]], "name (rbf property)": [[25, "romcomma.gpf.kernels.RBF.name"]], "name_scope (rbf property)": [[25, "romcomma.gpf.kernels.RBF.name_scope"]], "non_trainable_variables (rbf property)": [[25, "romcomma.gpf.kernels.RBF.non_trainable_variables"]], "on_separate_dims() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.on_separate_dims"]], "scaled_difference_matrix() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.scaled_difference_matrix"]], "slice() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.slice"]], "slice_cov() (rbf method)": [[25, "romcomma.gpf.kernels.RBF.slice_cov"]], "submodules (rbf property)": [[25, "romcomma.gpf.kernels.RBF.submodules"]], "trainable_variables (rbf property)": [[25, "romcomma.gpf.kernels.RBF.trainable_variables"]], "variables (rbf property)": [[25, "romcomma.gpf.kernels.RBF.variables"]], "with_name_scope() (rbf class method)": [[25, "romcomma.gpf.kernels.RBF.with_name_scope"]], "romcomma.gpf.likelihoods": [[26, "module-romcomma.gpf.likelihoods"]], "mogaussian (class in romcomma.gpf.likelihoods)": [[27, "romcomma.gpf.likelihoods.MOGaussian"]], "n() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.N"]], "__init__() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.__init__"]], "conditional_mean() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.conditional_mean"]], "conditional_variance() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.conditional_variance"]], "log_prob() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.log_prob"]], "name (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.name"]], "name_scope (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.name_scope"]], "non_trainable_variables (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.non_trainable_variables"]], "predict_log_density() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.predict_log_density"]], "predict_mean_and_var() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.predict_mean_and_var"]], "split_axis_shape() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.split_axis_shape"]], "submodules (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.submodules"]], "trainable_variables (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.trainable_variables"]], "variables (mogaussian property)": [[27, "romcomma.gpf.likelihoods.MOGaussian.variables"]], "variational_expectations() (mogaussian method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.variational_expectations"]], "with_name_scope() (mogaussian class method)": [[27, "romcomma.gpf.likelihoods.MOGaussian.with_name_scope"]], "romcomma.gpf.mean_functions": [[28, "module-romcomma.gpf.mean_functions"]], "momeanfunction (class in romcomma.gpf.mean_functions)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction"]], "__init__() (momeanfunction method)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.__init__"]], "functions (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.functions"]], "name (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.name"]], "name_scope (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.name_scope"]], "non_trainable_variables (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.non_trainable_variables"]], "output_dim (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.output_dim"]], "submodules (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.submodules"]], "trainable_variables (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.trainable_variables"]], "variables (momeanfunction property)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.variables"]], "with_name_scope() (momeanfunction class method)": [[29, "romcomma.gpf.mean_functions.MOMeanFunction.with_name_scope"]], "romcomma.gpf.models": [[30, "module-romcomma.gpf.models"]], "l (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.L"]], "m (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.M"]], "mogpr (class in romcomma.gpf.models)": [[31, "romcomma.gpf.models.MOGPR"]], "__init__() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.__init__"]], "calc_num_latent_gps() (mogpr static method)": [[31, "romcomma.gpf.models.MOGPR.calc_num_latent_gps"]], "calc_num_latent_gps_from_data() (mogpr static method)": [[31, "romcomma.gpf.models.MOGPR.calc_num_latent_gps_from_data"]], "log_marginal_likelihood() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.log_marginal_likelihood"]], "log_posterior_density() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.log_posterior_density"]], "log_prior_density() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.log_prior_density"]], "maximum_log_likelihood_objective() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.maximum_log_likelihood_objective"]], "name (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.name"]], "name_scope (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.name_scope"]], "non_trainable_variables (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.non_trainable_variables"]], "predict_f() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.predict_f"]], "predict_f_samples() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.predict_f_samples"]], "predict_log_density() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.predict_log_density"]], "predict_y() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.predict_y"]], "submodules (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.submodules"]], "trainable_variables (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.trainable_variables"]], "training_loss() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.training_loss"]], "training_loss_closure() (mogpr method)": [[31, "romcomma.gpf.models.MOGPR.training_loss_closure"]], "variables (mogpr property)": [[31, "romcomma.gpf.models.MOGPR.variables"]], "with_name_scope() (mogpr class method)": [[31, "romcomma.gpf.models.MOGPR.with_name_scope"]], "romcomma.gpf.tests": [[32, "module-romcomma.gpf.tests"]], "covariance() (in module romcomma.gpf.tests)": [[33, "romcomma.gpf.tests.covariance"]], "increment() (in module romcomma.gpf.tests)": [[34, "romcomma.gpf.tests.increment"]], "kernel() (in module romcomma.gpf.tests)": [[35, "romcomma.gpf.tests.kernel"]], "likelihood() (in module romcomma.gpf.tests)": [[36, "romcomma.gpf.tests.likelihood"]], "regression_data() (in module romcomma.gpf.tests)": [[37, "romcomma.gpf.tests.regression_data"]], "romcomma.gpr": [[38, "module-romcomma.gpr"]], "romcomma.gpr.kernels": [[39, "module-romcomma.gpr.kernels"]], "kernel (class in romcomma.gpr.kernels)": [[40, "romcomma.gpr.kernels.Kernel"]], "kernel.data (class in romcomma.gpr.kernels)": [[40, "romcomma.gpr.kernels.Kernel.Data"]], "l (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.L"]], "m (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.M"]], "meta (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.META"]], "namedtuple (kernel.data attribute)": [[40, "romcomma.gpr.kernels.Kernel.Data.NamedTuple"]], "type_identifier (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.TYPE_IDENTIFIER"]], "typefromidentifier() (kernel class method)": [[40, "romcomma.gpr.kernels.Kernel.TypeFromIdentifier"]], "typefromparameters() (kernel class method)": [[40, "romcomma.gpr.kernels.Kernel.TypeFromParameters"]], "__init__() (kernel method)": [[40, "romcomma.gpr.kernels.Kernel.__init__"]], "broadcast_parameters() (kernel method)": [[40, "romcomma.gpr.kernels.Kernel.broadcast_parameters"]], "calibrate() (kernel method)": [[40, "romcomma.gpr.kernels.Kernel.calibrate"]], "copy() (kernel.data static method)": [[40, "romcomma.gpr.kernels.Kernel.Data.copy"]], "delete() (kernel.data static method)": [[40, "romcomma.gpr.kernels.Kernel.Data.delete"]], "empty() (kernel.data static method)": [[40, "romcomma.gpr.kernels.Kernel.Data.empty"]], "implementation (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.implementation"]], "is_covariant (kernel property)": [[40, "romcomma.gpr.kernels.Kernel.is_covariant"]], "move() (kernel.data method)": [[40, "romcomma.gpr.kernels.Kernel.Data.move"]], "read() (kernel.data class method)": [[40, "romcomma.gpr.kernels.Kernel.Data.read"]], "l (rbf property)": [[41, "romcomma.gpr.kernels.RBF.L"]], "m (rbf property)": [[41, "romcomma.gpr.kernels.RBF.M"]], "meta (rbf attribute)": [[41, "romcomma.gpr.kernels.RBF.META"]], "namedtuple (rbf.data attribute)": [[41, "romcomma.gpr.kernels.RBF.Data.NamedTuple"]], "rbf (class in romcomma.gpr.kernels)": [[41, "romcomma.gpr.kernels.RBF"]], "rbf.data (class in romcomma.gpr.kernels)": [[41, "romcomma.gpr.kernels.RBF.Data"]], "type_identifier (rbf attribute)": [[41, "romcomma.gpr.kernels.RBF.TYPE_IDENTIFIER"]], "typefromidentifier() (rbf class method)": [[41, "romcomma.gpr.kernels.RBF.TypeFromIdentifier"]], "typefromparameters() (rbf class method)": [[41, "romcomma.gpr.kernels.RBF.TypeFromParameters"]], "broadcast_parameters() (rbf method)": [[41, "romcomma.gpr.kernels.RBF.broadcast_parameters"]], "calibrate() (rbf method)": [[41, "romcomma.gpr.kernels.RBF.calibrate"]], "copy() (rbf.data static method)": [[41, "romcomma.gpr.kernels.RBF.Data.copy"]], "delete() (rbf.data static method)": [[41, "romcomma.gpr.kernels.RBF.Data.delete"]], "empty() (rbf.data static method)": [[41, "romcomma.gpr.kernels.RBF.Data.empty"]], "implementation (rbf property)": [[41, "romcomma.gpr.kernels.RBF.implementation"]], "is_covariant (rbf property)": [[41, "romcomma.gpr.kernels.RBF.is_covariant"]], "move() (rbf.data method)": [[41, "romcomma.gpr.kernels.RBF.Data.move"]], "read() (rbf.data class method)": [[41, "romcomma.gpr.kernels.RBF.Data.read"]], "romcomma.gpr.models": [[42, "module-romcomma.gpr.models"]], "gpr (class in romcomma.gpr.models)": [[43, "romcomma.gpr.models.GPR"]], "gpr.data (class in romcomma.gpr.models)": [[43, "romcomma.gpr.models.GPR.Data"]], "kernel_folder_name (gpr property)": [[43, "romcomma.gpr.models.GPR.KERNEL_FOLDER_NAME"]], "k_cho (gpr property)": [[43, "romcomma.gpr.models.GPR.K_cho"]], "k_inv_y (gpr property)": [[43, "romcomma.gpr.models.GPR.K_inv_Y"]], "l (gpr property)": [[43, "romcomma.gpr.models.GPR.L"]], "m (gpr property)": [[43, "romcomma.gpr.models.GPR.M"]], "meta (gpr property)": [[43, "romcomma.gpr.models.GPR.META"]], "n (gpr property)": [[43, "romcomma.gpr.models.GPR.N"]], "namedtuple (gpr.data attribute)": [[43, "romcomma.gpr.models.GPR.Data.NamedTuple"]], "x (gpr property)": [[43, "romcomma.gpr.models.GPR.X"]], "y (gpr property)": [[43, "romcomma.gpr.models.GPR.Y"]], "__init__() (gpr method)": [[43, "romcomma.gpr.models.GPR.__init__"]], "broadcast_parameters() (gpr method)": [[43, "romcomma.gpr.models.GPR.broadcast_parameters"]], "copy() (gpr.data static method)": [[43, "romcomma.gpr.models.GPR.Data.copy"]], "delete() (gpr.data static method)": [[43, "romcomma.gpr.models.GPR.Data.delete"]], "empty() (gpr.data static method)": [[43, "romcomma.gpr.models.GPR.Data.empty"]], "fold (gpr property)": [[43, "romcomma.gpr.models.GPR.fold"]], "implementation (gpr property)": [[43, "romcomma.gpr.models.GPR.implementation"]], "move() (gpr.data method)": [[43, "romcomma.gpr.models.GPR.Data.move"]], "predict() (gpr method)": [[43, "romcomma.gpr.models.GPR.predict"]], "read() (gpr.data class method)": [[43, "romcomma.gpr.models.GPR.Data.read"]], "test() (gpr method)": [[43, "romcomma.gpr.models.GPR.test"]], "likelihood (class in romcomma.gpr.models)": [[44, "romcomma.gpr.models.Likelihood"]], "likelihood.data (class in romcomma.gpr.models)": [[44, "romcomma.gpr.models.Likelihood.Data"]], "meta (likelihood property)": [[44, "romcomma.gpr.models.Likelihood.META"]], "namedtuple (likelihood.data attribute)": [[44, "romcomma.gpr.models.Likelihood.Data.NamedTuple"]], "__init__() (likelihood method)": [[44, "romcomma.gpr.models.Likelihood.__init__"]], "calibrate() (likelihood method)": [[44, "romcomma.gpr.models.Likelihood.calibrate"]], "copy() (likelihood.data static method)": [[44, "romcomma.gpr.models.Likelihood.Data.copy"]], "delete() (likelihood.data static method)": [[44, "romcomma.gpr.models.Likelihood.Data.delete"]], "empty() (likelihood.data static method)": [[44, "romcomma.gpr.models.Likelihood.Data.empty"]], "move() (likelihood.data method)": [[44, "romcomma.gpr.models.Likelihood.Data.move"]], "read() (likelihood.data class method)": [[44, "romcomma.gpr.models.Likelihood.Data.read"]], "kernel_folder_name (mogp attribute)": [[45, "romcomma.gpr.models.MOGP.KERNEL_FOLDER_NAME"]], "k_cho (mogp property)": [[45, "romcomma.gpr.models.MOGP.K_cho"]], "k_inv_y (mogp property)": [[45, "romcomma.gpr.models.MOGP.K_inv_Y"]], "l (mogp property)": [[45, "romcomma.gpr.models.MOGP.L"]], "m (mogp property)": [[45, "romcomma.gpr.models.MOGP.M"]], "meta (mogp property)": [[45, "romcomma.gpr.models.MOGP.META"]], "mogp (class in romcomma.gpr.models)": [[45, "romcomma.gpr.models.MOGP"]], "mogp.data (class in romcomma.gpr.models)": [[45, "romcomma.gpr.models.MOGP.Data"]], "n (mogp property)": [[45, "romcomma.gpr.models.MOGP.N"]], "namedtuple (mogp.data attribute)": [[45, "romcomma.gpr.models.MOGP.Data.NamedTuple"]], "x (mogp property)": [[45, "romcomma.gpr.models.MOGP.X"]], "y (mogp property)": [[45, "romcomma.gpr.models.MOGP.Y"]], "__init__() (mogp method)": [[45, "romcomma.gpr.models.MOGP.__init__"]], "broadcast_parameters() (mogp method)": [[45, "romcomma.gpr.models.MOGP.broadcast_parameters"]], "calibrate() (mogp method)": [[45, "romcomma.gpr.models.MOGP.calibrate"]], "check_k_inv_y() (mogp method)": [[45, "romcomma.gpr.models.MOGP.check_K_inv_Y"]], "copy() (mogp.data static method)": [[45, "romcomma.gpr.models.MOGP.Data.copy"]], "delete() (mogp.data static method)": [[45, "romcomma.gpr.models.MOGP.Data.delete"]], "empty() (mogp.data static method)": [[45, "romcomma.gpr.models.MOGP.Data.empty"]], "fold (mogp property)": [[45, "romcomma.gpr.models.MOGP.fold"]], "implementation (mogp property)": [[45, "romcomma.gpr.models.MOGP.implementation"]], "move() (mogp.data method)": [[45, "romcomma.gpr.models.MOGP.Data.move"]], "predict() (mogp method)": [[45, "romcomma.gpr.models.MOGP.predict"]], "read() (mogp.data class method)": [[45, "romcomma.gpr.models.MOGP.Data.read"]], "test() (mogp method)": [[45, "romcomma.gpr.models.MOGP.test"]], "romcomma.gsa": [[46, "module-romcomma.gsa"]], "romcomma.gsa.base": [[47, "module-romcomma.gsa.base"]], "calibrator (class in romcomma.gsa.base)": [[48, "romcomma.gsa.base.Calibrator"]], "__init__() (calibrator method)": [[48, "romcomma.gsa.base.Calibrator.__init__"]], "gaussian (class in romcomma.gsa.base)": [[49, "romcomma.gsa.base.Gaussian"]], "__init__() (gaussian method)": [[49, "romcomma.gsa.base.Gaussian.__init__"]], "cho_diag (gaussian attribute)": [[49, "romcomma.gsa.base.Gaussian.cho_diag"]], "det (gaussian property)": [[49, "romcomma.gsa.base.Gaussian.det"]], "expand_dims() (gaussian method)": [[49, "romcomma.gsa.base.Gaussian.expand_dims"]], "exponent (gaussian attribute)": [[49, "romcomma.gsa.base.Gaussian.exponent"]], "pdf (gaussian property)": [[49, "romcomma.gsa.base.Gaussian.pdf"]], "diag_det() (in module romcomma.gsa.base)": [[50, "romcomma.gsa.base.diag_det"]], "mean() (in module romcomma.gsa.base)": [[51, "romcomma.gsa.base.mean"]], "ms() (in module romcomma.gsa.base)": [[52, "romcomma.gsa.base.ms"]], "rms() (in module romcomma.gsa.base)": [[53, "romcomma.gsa.base.rms"]], "sos() (in module romcomma.gsa.base)": [[54, "romcomma.gsa.base.sos"]], "sym_check() (in module romcomma.gsa.base)": [[55, "romcomma.gsa.base.sym_check"]], "romcomma.gsa.calibrators": [[56, "module-romcomma.gsa.calibrators"]], "closedsobol (class in romcomma.gsa.calibrators)": [[57, "romcomma.gsa.calibrators.ClosedSobol"]], "meta (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.META"]], "__init__() (closedsobol method)": [[57, "romcomma.gsa.calibrators.ClosedSobol.__init__"]], "marginalize() (closedsobol method)": [[57, "romcomma.gsa.calibrators.ClosedSobol.marginalize"]], "name (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.name"]], "name_scope (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.name_scope"]], "non_trainable_variables (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.non_trainable_variables"]], "submodules (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.submodules"]], "trainable_variables (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.trainable_variables"]], "variables (closedsobol property)": [[57, "romcomma.gsa.calibrators.ClosedSobol.variables"]], "with_name_scope() (closedsobol class method)": [[57, "romcomma.gsa.calibrators.ClosedSobol.with_name_scope"]], "closedsobolwitherror (class in romcomma.gsa.calibrators)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError"]], "closedsobolwitherror.rankequation (class in romcomma.gsa.calibrators)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation"]], "closedsobolwitherror.rankequations (class in romcomma.gsa.calibrators)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations"]], "diagonal (closedsobolwitherror.rankequations attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations.DIAGONAL"]], "meta (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.META"]], "mixed (closedsobolwitherror.rankequations attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations.MIXED"]], "__init__() (closedsobolwitherror method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.__init__"]], "count() (closedsobolwitherror.rankequation method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.count"]], "count() (closedsobolwitherror.rankequations method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations.count"]], "i (closedsobolwitherror.rankequation attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.i"]], "index() (closedsobolwitherror.rankequation method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.index"]], "index() (closedsobolwitherror.rankequations method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquations.index"]], "j (closedsobolwitherror.rankequation attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.j"]], "k (closedsobolwitherror.rankequation attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.k"]], "l (closedsobolwitherror.rankequation attribute)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.RankEquation.l"]], "marginalize() (closedsobolwitherror method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.marginalize"]], "name (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.name"]], "name_scope (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.name_scope"]], "non_trainable_variables (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.non_trainable_variables"]], "submodules (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.submodules"]], "trainable_variables (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.trainable_variables"]], "variables (closedsobolwitherror property)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.variables"]], "with_name_scope() (closedsobolwitherror class method)": [[58, "romcomma.gsa.calibrators.ClosedSobolWithError.with_name_scope"]], "closedsobolwithrotation (class in romcomma.gsa.calibrators)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation"]], "meta (closedsobolwithrotation attribute)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.META"]], "__init__() (closedsobolwithrotation method)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.__init__"]], "marginalize() (closedsobolwithrotation method)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.marginalize"]], "name (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.name"]], "name_scope (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.name_scope"]], "non_trainable_variables (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.non_trainable_variables"]], "submodules (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.submodules"]], "trainable_variables (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.trainable_variables"]], "variables (closedsobolwithrotation property)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.variables"]], "with_name_scope() (closedsobolwithrotation class method)": [[59, "romcomma.gsa.calibrators.ClosedSobolWithRotation.with_name_scope"]], "romcomma.gsa.models": [[60, "module-romcomma.gsa.models"]], "gsa (class in romcomma.gsa.models)": [[61, "romcomma.gsa.models.GSA"]], "gsa.data (class in romcomma.gsa.models)": [[61, "romcomma.gsa.models.GSA.Data"]], "gsa.data.namedtuple (class in romcomma.gsa.models)": [[61, "romcomma.gsa.models.GSA.Data.NamedTuple"]], "gsa.kind (class in romcomma.gsa.models)": [[61, "romcomma.gsa.models.GSA.Kind"]], "meta (gsa attribute)": [[61, "romcomma.gsa.models.GSA.META"]], "notimplemented (gsa.data.namedtuple attribute)": [[61, "romcomma.gsa.models.GSA.Data.NamedTuple.NotImplemented"]], "__init__() (gsa method)": [[61, "romcomma.gsa.models.GSA.__init__"]], "calibrate() (gsa method)": [[61, "romcomma.gsa.models.GSA.calibrate"]], "calibrator (gsa property)": [[61, "romcomma.gsa.models.GSA.calibrator"]], "copy() (gsa.data static method)": [[61, "romcomma.gsa.models.GSA.Data.copy"]], "count() (gsa.data.namedtuple method)": [[61, "romcomma.gsa.models.GSA.Data.NamedTuple.count"]], "delete() (gsa.data static method)": [[61, "romcomma.gsa.models.GSA.Data.delete"]], "empty() (gsa.data static method)": [[61, "romcomma.gsa.models.GSA.Data.empty"]], "index() (gsa.data.namedtuple method)": [[61, "romcomma.gsa.models.GSA.Data.NamedTuple.index"]], "move() (gsa.data method)": [[61, "romcomma.gsa.models.GSA.Data.move"]], "read() (gsa.data class method)": [[61, "romcomma.gsa.models.GSA.Data.read"]], "meta (sobol property)": [[62, "romcomma.gsa.models.Sobol.META"]], "namedtuple (sobol.data attribute)": [[62, "romcomma.gsa.models.Sobol.Data.NamedTuple"]], "sobol (class in romcomma.gsa.models)": [[62, "romcomma.gsa.models.Sobol"]], "sobol.data (class in romcomma.gsa.models)": [[62, "romcomma.gsa.models.Sobol.Data"]], "sobol.kind (class in romcomma.gsa.models)": [[62, "romcomma.gsa.models.Sobol.Kind"]], "__init__() (sobol method)": [[62, "romcomma.gsa.models.Sobol.__init__"]], "calibrate() (sobol method)": [[62, "romcomma.gsa.models.Sobol.calibrate"]], "calibrator (sobol property)": [[62, "romcomma.gsa.models.Sobol.calibrator"]], "copy() (sobol.data static method)": [[62, "romcomma.gsa.models.Sobol.Data.copy"]], "delete() (sobol.data static method)": [[62, "romcomma.gsa.models.Sobol.Data.delete"]], "empty() (sobol.data static method)": [[62, "romcomma.gsa.models.Sobol.Data.empty"]], "move() (sobol.data method)": [[62, "romcomma.gsa.models.Sobol.Data.move"]], "read() (sobol.data class method)": [[62, "romcomma.gsa.models.Sobol.Data.read"]], "romcomma.rom": [[63, "module-romcomma.rom"]], "romcomma.rom.old": [[64, "module-romcomma.rom.old"]], "romcomma.run": [[65, "module-romcomma.run"]], "romcomma.run.context": [[66, "module-romcomma.run.context"]], "environment() (in module romcomma.run.context)": [[67, "romcomma.run.context.Environment"]], "timer() (in module romcomma.run.context)": [[68, "romcomma.run.context.Timer"]], "romcomma.run.function": [[69, "module-romcomma.run.function"]], "all (in module romcomma.run.function)": [[70, "romcomma.run.function.ALL"]], "ishigami (in module romcomma.run.function)": [[71, "romcomma.run.function.ISHIGAMI"]], "oakley2004 (in module romcomma.run.function)": [[72, "romcomma.run.function.OAKLEY2004"]], "sobol_g (in module romcomma.run.function)": [[73, "romcomma.run.function.SOBOL_G"]], "scalar (class in romcomma.run.function)": [[74, "romcomma.run.function.Scalar"]], "__init__() (scalar method)": [[74, "romcomma.run.function.Scalar.__init__"]], "vector (class in romcomma.run.function)": [[75, "romcomma.run.function.Vector"]], "__init__() (vector method)": [[75, "romcomma.run.function.Vector.__init__"]], "clear() (vector method)": [[75, "romcomma.run.function.Vector.clear"]], "concat() (vector class method)": [[75, "romcomma.run.function.Vector.concat"]], "copy() (vector method)": [[75, "romcomma.run.function.Vector.copy"]], "fromkeys() (vector method)": [[75, "romcomma.run.function.Vector.fromkeys"]], "get() (vector method)": [[75, "romcomma.run.function.Vector.get"]], "items() (vector method)": [[75, "romcomma.run.function.Vector.items"]], "keys() (vector method)": [[75, "romcomma.run.function.Vector.keys"]], "meta (vector property)": [[75, "romcomma.run.function.Vector.meta"]], "pop() (vector method)": [[75, "romcomma.run.function.Vector.pop"]], "popitem() (vector method)": [[75, "romcomma.run.function.Vector.popitem"]], "setdefault() (vector method)": [[75, "romcomma.run.function.Vector.setdefault"]], "subvector() (vector method)": [[75, "romcomma.run.function.Vector.subVector"]], "update() (vector method)": [[75, "romcomma.run.function.Vector.update"]], "values() (vector method)": [[75, "romcomma.run.function.Vector.values"]], "linspace() (in module romcomma.run.function)": [[76, "romcomma.run.function.linspace"]], "romcomma.run.results": [[77, "module-romcomma.run.results"]], "collect (class in romcomma.run.results)": [[78, "romcomma.run.results.Collect"]], "__init__() (collect method)": [[78, "romcomma.run.results.Collect.__init__"]], "csvs (collect attribute)": [[78, "romcomma.run.results.Collect.csvs"]], "folders (collect attribute)": [[78, "romcomma.run.results.Collect.folders"]], "from_folders() (collect method)": [[78, "romcomma.run.results.Collect.from_folders"]], "from_folds() (collect method)": [[78, "romcomma.run.results.Collect.from_folds"]], "ignore_missing (collect attribute)": [[78, "romcomma.run.results.Collect.ignore_missing"]], "write_options (collect attribute)": [[78, "romcomma.run.results.Collect.write_options"]], "copy() (in module romcomma.run.results)": [[79, "romcomma.run.results.copy"]], "romcomma.run.sample": [[80, "module-romcomma.run.sample"]], "doe (class in romcomma.run.sample)": [[81, "romcomma.run.sample.DOE"]], "method (doe attribute)": [[81, "romcomma.run.sample.DOE.Method"]], "__init__() (doe method)": [[81, "romcomma.run.sample.DOE.__init__"]], "full_factorial() (doe static method)": [[81, "romcomma.run.sample.DOE.full_factorial"]], "latin_hypercube() (doe static method)": [[81, "romcomma.run.sample.DOE.latin_hypercube"]], "function (class in romcomma.run.sample)": [[82, "romcomma.run.sample.Function"]], "__init__() (function method)": [[82, "romcomma.run.sample.Function.__init__"]], "collection() (function method)": [[82, "romcomma.run.sample.Function.collection"]], "into_k_folds() (function method)": [[82, "romcomma.run.sample.Function.into_K_folds"]], "repo (function property)": [[82, "romcomma.run.sample.Function.repo"]], "rotate_folds() (function method)": [[82, "romcomma.run.sample.Function.rotate_folds"]], "un_rotate_folds() (function method)": [[82, "romcomma.run.sample.Function.un_rotate_folds"]], "gaussiannoise (class in romcomma.run.sample)": [[83, "romcomma.run.sample.GaussianNoise"]], "gaussiannoise.variance (class in romcomma.run.sample)": [[83, "romcomma.run.sample.GaussianNoise.Variance"]], "__init__() (gaussiannoise method)": [[83, "romcomma.run.sample.GaussianNoise.__init__"]], "matrix (gaussiannoise.variance property)": [[83, "romcomma.run.sample.GaussianNoise.Variance.matrix"]], "meta (gaussiannoise.variance property)": [[83, "romcomma.run.sample.GaussianNoise.Variance.meta"]], "romcomma.run.summarised": [[84, "module-romcomma.run.summarised"]], "gpr() (in module romcomma.run.summarised)": [[85, "romcomma.run.summarised.gpr"]], "gsa() (in module romcomma.run.summarised)": [[86, "romcomma.run.summarised.gsa"]], "romcomma.user": [[87, "module-romcomma.user"]], "romcomma.user.benchmark_gsa": [[88, "module-romcomma.user.benchmark_gsa"]], "base_folder (in module romcomma.user.benchmark_gsa)": [[89, "romcomma.user.benchmark_gsa.BASE_FOLDER"]], "romcomma.user.gpr_from_function": [[90, "module-romcomma.user.gpr_from_function"]], "doe() (in module romcomma.user.gpr_from_function)": [[91, "romcomma.user.gpr_from_function.DOE"]], "function_vector (in module romcomma.user.gpr_from_function)": [[92, "romcomma.user.gpr_from_function.FUNCTION_VECTOR"]], "ignore_exceptions (in module romcomma.user.gpr_from_function)": [[93, "romcomma.user.gpr_from_function.IGNORE_EXCEPTIONS"]], "is_covariant (in module romcomma.user.gpr_from_function)": [[94, "romcomma.user.gpr_from_function.IS_COVARIANT"]], "is_isotropic (in module romcomma.user.gpr_from_function)": [[95, "romcomma.user.gpr_from_function.IS_ISOTROPIC"]], "is_noise_covariant (in module romcomma.user.gpr_from_function)": [[96, "romcomma.user.gpr_from_function.IS_NOISE_COVARIANT"]], "is_noise_variance_random (in module romcomma.user.gpr_from_function)": [[97, "romcomma.user.gpr_from_function.IS_NOISE_VARIANCE_RANDOM"]], "is_read (in module romcomma.user.gpr_from_function)": [[98, "romcomma.user.gpr_from_function.IS_READ"]], "k (in module romcomma.user.gpr_from_function)": [[99, "romcomma.user.gpr_from_function.K"]], "ms (in module romcomma.user.gpr_from_function)": [[100, "romcomma.user.gpr_from_function.Ms"]], "noise_magnitudes (in module romcomma.user.gpr_from_function)": [[101, "romcomma.user.gpr_from_function.NOISE_MAGNITUDES"]], "ns (in module romcomma.user.gpr_from_function)": [[102, "romcomma.user.gpr_from_function.Ns"]], "read (in module romcomma.user.gpr_from_function)": [[103, "romcomma.user.gpr_from_function.READ"]], "root (in module romcomma.user.gpr_from_function)": [[104, "romcomma.user.gpr_from_function.ROOT"]], "rotations (in module romcomma.user.gpr_from_function)": [[105, "romcomma.user.gpr_from_function.ROTATIONS"]], "romcomma.user.gsa_from_function": [[106, "module-romcomma.user.gsa_from_function"]], "doe() (in module romcomma.user.gsa_from_function)": [[107, "romcomma.user.gsa_from_function.DOE"]], "function_vector (in module romcomma.user.gsa_from_function)": [[108, "romcomma.user.gsa_from_function.FUNCTION_VECTOR"]], "ignore_exceptions (in module romcomma.user.gsa_from_function)": [[109, "romcomma.user.gsa_from_function.IGNORE_EXCEPTIONS"]], "is_covariant (in module romcomma.user.gsa_from_function)": [[110, "romcomma.user.gsa_from_function.IS_COVARIANT"]], "is_isotropic (in module romcomma.user.gsa_from_function)": [[111, "romcomma.user.gsa_from_function.IS_ISOTROPIC"]], "is_noise_covariant (in module romcomma.user.gsa_from_function)": [[112, "romcomma.user.gsa_from_function.IS_NOISE_COVARIANT"]], "is_noise_variance_random (in module romcomma.user.gsa_from_function)": [[113, "romcomma.user.gsa_from_function.IS_NOISE_VARIANCE_RANDOM"]], "is_read (in module romcomma.user.gsa_from_function)": [[114, "romcomma.user.gsa_from_function.IS_READ"]], "k (in module romcomma.user.gsa_from_function)": [[115, "romcomma.user.gsa_from_function.K"]], "kinds (in module romcomma.user.gsa_from_function)": [[116, "romcomma.user.gsa_from_function.KINDS"]], "ms (in module romcomma.user.gsa_from_function)": [[117, "romcomma.user.gsa_from_function.Ms"]], "noise_magnitudes (in module romcomma.user.gsa_from_function)": [[118, "romcomma.user.gsa_from_function.NOISE_MAGNITUDES"]], "ns (in module romcomma.user.gsa_from_function)": [[119, "romcomma.user.gsa_from_function.Ns"]], "read (in module romcomma.user.gsa_from_function)": [[120, "romcomma.user.gsa_from_function.READ"]], "root (in module romcomma.user.gsa_from_function)": [[121, "romcomma.user.gsa_from_function.ROOT"]], "rotations (in module romcomma.user.gsa_from_function)": [[122, "romcomma.user.gsa_from_function.ROTATIONS"]], "romcomma.user.repo_from_csv": [[123, "module-romcomma.user.repo_from_csv"]], "add_noise (in module romcomma.user.repo_from_csv)": [[124, "romcomma.user.repo_from_csv.ADD_NOISE"]], "csv (in module romcomma.user.repo_from_csv)": [[125, "romcomma.user.repo_from_csv.CSV"]], "is_noise_covariant (in module romcomma.user.repo_from_csv)": [[126, "romcomma.user.repo_from_csv.IS_NOISE_COVARIANT"]], "is_noise_variance_random (in module romcomma.user.repo_from_csv)": [[127, "romcomma.user.repo_from_csv.IS_NOISE_VARIANCE_RANDOM"]], "k (in module romcomma.user.repo_from_csv)": [[128, "romcomma.user.repo_from_csv.K"]], "noise_magnitudes (in module romcomma.user.repo_from_csv)": [[129, "romcomma.user.repo_from_csv.NOISE_MAGNITUDES"]], "root (in module romcomma.user.repo_from_csv)": [[130, "romcomma.user.repo_from_csv.ROOT"]], "romcomma.user.repo_from_function": [[131, "module-romcomma.user.repo_from_function"]], "doe() (in module romcomma.user.repo_from_function)": [[132, "romcomma.user.repo_from_function.DOE"]], "function_vector (in module romcomma.user.repo_from_function)": [[133, "romcomma.user.repo_from_function.FUNCTION_VECTOR"]], "is_noise_covariant (in module romcomma.user.repo_from_function)": [[134, "romcomma.user.repo_from_function.IS_NOISE_COVARIANT"]], "is_noise_variance_random (in module romcomma.user.repo_from_function)": [[135, "romcomma.user.repo_from_function.IS_NOISE_VARIANCE_RANDOM"]], "k (in module romcomma.user.repo_from_function)": [[136, "romcomma.user.repo_from_function.K"]], "ms (in module romcomma.user.repo_from_function)": [[137, "romcomma.user.repo_from_function.Ms"]], "noise_magnitudes (in module romcomma.user.repo_from_function)": [[138, "romcomma.user.repo_from_function.NOISE_MAGNITUDES"]], "ns (in module romcomma.user.repo_from_function)": [[139, "romcomma.user.repo_from_function.Ns"]], "read (in module romcomma.user.repo_from_function)": [[140, "romcomma.user.repo_from_function.READ"]], "root (in module romcomma.user.repo_from_function)": [[141, "romcomma.user.repo_from_function.ROOT"]], "rotations (in module romcomma.user.repo_from_function)": [[142, "romcomma.user.repo_from_function.ROTATIONS"]], "romcomma.user.toy": [[143, "module-romcomma.user.toy"]], "root (in module romcomma.user.toy)": [[144, "romcomma.user.toy.ROOT"]]}})